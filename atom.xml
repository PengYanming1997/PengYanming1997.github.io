<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PengYanming1997</title>
  
  <subtitle>进阶中的小小程序媛</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2020-11-03T06:49:16.311Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>ReTinaPeng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>第38周双周赛</title>
    <link href="http://example.com/2020/11/03/%E7%AC%AC38%E5%91%A8%E5%8F%8C%E5%91%A8%E8%B5%9B/"/>
    <id>http://example.com/2020/11/03/%E7%AC%AC38%E5%91%A8%E5%8F%8C%E5%91%A8%E8%B5%9B/</id>
    <published>2020-11-03T04:56:22.000Z</published>
    <updated>2020-11-03T06:49:16.311Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1636-按照频率将数组升序排序-Easy"><a href="#1636-按照频率将数组升序排序-Easy" class="headerlink" title="1636. 按照频率将数组升序排序. Easy"></a>1636. 按照频率将数组升序排序. Easy</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">frequencySort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; Map;</span><br><span class="line">        sort(nums.begin(),nums.end());</span><br><span class="line">        reverse(nums.begin(),nums.end());</span><br><span class="line">        <span class="keyword">int</span> temp = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;nums.size() - <span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] == nums[i + <span class="number">1</span>])&#123;</span><br><span class="line">                temp ++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                Map[temp].push_back(nums[i]);</span><br><span class="line">                temp = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Map[temp].push_back(nums[nums.size() - <span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; :: iterator it = Map.begin();it != Map.end();it ++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;it-&gt;second.size();i ++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>;k&lt;it-&gt;first;k++)&#123;</span><br><span class="line">                    ans.push_back(it-&gt;second[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">        <span class="comment">// return Map[1][0];</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1637-两点之间不包含任何点的最宽垂直面积-Medium"><a href="#1637-两点之间不包含任何点的最宽垂直面积-Medium" class="headerlink" title="1637. 两点之间不包含任何点的最宽垂直面积.  Medium"></a>1637. 两点之间不包含任何点的最宽垂直面积.  Medium</h2><h3 id="对数组进行排序-之后最大宽度就是相邻之间的两个点的最大的横坐标差值"><a href="#对数组进行排序-之后最大宽度就是相邻之间的两个点的最大的横坐标差值" class="headerlink" title="对数组进行排序 之后最大宽度就是相邻之间的两个点的最大的横坐标差值"></a>对数组进行排序 之后最大宽度就是相邻之间的两个点的最大的横坐标差值</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxWidthOfVerticalArea</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; points)</span> </span>&#123;</span><br><span class="line">        sort(points.begin(),points.end());</span><br><span class="line">        <span class="keyword">int</span> size = INT_MIN;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;points.size();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(points[i][<span class="number">0</span>] == points[i - <span class="number">1</span>][<span class="number">0</span>])&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            size = max(points[i][<span class="number">0</span>] - points[i - <span class="number">1</span>][<span class="number">0</span>],size);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1637-两点之间不包含任何点的最宽垂直面积-Medium-1"><a href="#1637-两点之间不包含任何点的最宽垂直面积-Medium-1" class="headerlink" title="1637. 两点之间不包含任何点的最宽垂直面积.  Medium"></a>1637. 两点之间不包含任何点的最宽垂直面积.  Medium</h2><h3 id="对数组进行排序-之后最大宽度就是相邻之间的两个点的最大的横坐标差值-1"><a href="#对数组进行排序-之后最大宽度就是相邻之间的两个点的最大的横坐标差值-1" class="headerlink" title="对数组进行排序 之后最大宽度就是相邻之间的两个点的最大的横坐标差值"></a>对数组进行排序 之后最大宽度就是相邻之间的两个点的最大的横坐标差值</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxWidthOfVerticalArea</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; points)</span> </span>&#123;</span><br><span class="line">        sort(points.begin(),points.end());</span><br><span class="line">        <span class="keyword">int</span> size = INT_MIN;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;points.size();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(points[i][<span class="number">0</span>] == points[i - <span class="number">1</span>][<span class="number">0</span>])&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            size = max(points[i][<span class="number">0</span>] - points[i - <span class="number">1</span>][<span class="number">0</span>],size);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1636-按照频率将数组升序排序-Easy&quot;&gt;&lt;a href=&quot;#1636-按照频率将数组升序排序-Easy&quot; class=&quot;headerlink&quot; title=&quot;1636. 按照频率将数组升序排序. Easy&quot;&gt;&lt;/a&gt;1636. 按照频率将数组升序排序. Ea</summary>
      
    
    
    
    <category term="LeetCode" scheme="http://example.com/categories/LeetCode/"/>
    
    <category term="周赛" scheme="http://example.com/categories/LeetCode/%E5%91%A8%E8%B5%9B/"/>
    
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>第213周赛总结</title>
    <link href="http://example.com/2020/11/02/%E7%AC%AC213%E5%91%A8%E8%B5%9B%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2020/11/02/%E7%AC%AC213%E5%91%A8%E8%B5%9B%E6%80%BB%E7%BB%93/</id>
    <published>2020-11-02T07:40:38.000Z</published>
    <updated>2020-11-02T09:20:25.685Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1640-能否连接形成数组-Easy"><a href="#1640-能否连接形成数组-Easy" class="headerlink" title="1640. 能否连接形成数组. Easy"></a>1640. 能否连接形成数组. Easy</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">canFormArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; pieces)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;arr.size();i++)&#123;</span><br><span class="line">            <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;pieces.size();j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(pieces[j][<span class="number">0</span>] == arr[i])&#123;</span><br><span class="line">                    flag = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>;k&lt;pieces[j].size();k++)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(pieces[j][k] != arr[i])&#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        i ++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    i --;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag == <span class="literal">false</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1641-统计字典序元音字符串的数目-Medium"><a href="#1641-统计字典序元音字符串的数目-Medium" class="headerlink" title="1641. 统计字典序元音字符串的数目. Medium"></a>1641. 统计字典序元音字符串的数目. Medium</h2><h3 id="动态规划-》「a之后可以接5种-e之后可以接4种-i之后可以接3种-o之后可以接2种-u之后可以接1种」"><a href="#动态规划-》「a之后可以接5种-e之后可以接4种-i之后可以接3种-o之后可以接2种-u之后可以接1种」" class="headerlink" title="动态规划=》「a之后可以接5种 e之后可以接4种 i之后可以接3种 o之后可以接2种 u之后可以接1种」"></a>动态规划=》「a之后可以接5种 e之后可以接4种 i之后可以接3种 o之后可以接2种 u之后可以接1种」</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countVowelStrings</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp = &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">while</span>(n != <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;dp.size();i++)&#123;</span><br><span class="line">                sum += dp[i];</span><br><span class="line">                dp[i] = sum;</span><br><span class="line">            &#125;</span><br><span class="line">            n --;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;dp.size();i++)&#123;</span><br><span class="line">            ans = ans + dp[i] * (<span class="number">5</span> - i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1642-可以到达的最远建筑-Medium"><a href="#1642-可以到达的最远建筑-Medium" class="headerlink" title="1642. 可以到达的最远建筑. Medium"></a>1642. 可以到达的最远建筑. Medium</h2><h3 id="先通过heights数组得到高度差数组-如果不需要砖块或者梯子高度差设置为0-之后遍历高度差数组-使用类似于回溯算法「遇到高度差为0的元素-直接去计算下一个-遇到高度差大于0的元素-有两种可能性去进行判断-》-一种是利用砖块-另一种是利用梯子」-存储能到达的最远的建筑。"><a href="#先通过heights数组得到高度差数组-如果不需要砖块或者梯子高度差设置为0-之后遍历高度差数组-使用类似于回溯算法「遇到高度差为0的元素-直接去计算下一个-遇到高度差大于0的元素-有两种可能性去进行判断-》-一种是利用砖块-另一种是利用梯子」-存储能到达的最远的建筑。" class="headerlink" title="先通过heights数组得到高度差数组 如果不需要砖块或者梯子高度差设置为0 之后遍历高度差数组 使用类似于回溯算法「遇到高度差为0的元素 直接去计算下一个 遇到高度差大于0的元素 有两种可能性去进行判断 =》 一种是利用砖块 另一种是利用梯子」 存储能到达的最远的建筑。"></a>先通过heights数组得到高度差数组 如果不需要砖块或者梯子高度差设置为0 之后遍历高度差数组 使用类似于回溯算法「遇到高度差为0的元素 直接去计算下一个 遇到高度差大于0的元素 有两种可能性去进行判断 =》 一种是利用砖块 另一种是利用梯子」 存储能到达的最远的建筑。</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">findBest</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; heights,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; res,<span class="keyword">int</span> temp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(temp &gt; heights.size() - <span class="number">1</span>)&#123;</span><br><span class="line">            index = max(index,temp);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(heights[temp] == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> findBest(heights,res,temp + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(res[<span class="number">0</span>] &lt; heights[temp] &amp;&amp; res[<span class="number">1</span>] == <span class="number">0</span>)&#123;</span><br><span class="line">            index = max(index,temp);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(res[<span class="number">0</span>] &gt;= heights[temp]) &#123;</span><br><span class="line">            res[<span class="number">0</span>] -= heights[temp];</span><br><span class="line">            temp += <span class="number">1</span>;</span><br><span class="line">            findBest(heights,res,temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(res[<span class="number">1</span>] != <span class="number">0</span>)&#123;</span><br><span class="line">            res[<span class="number">1</span>] --;</span><br><span class="line">            temp += <span class="number">1</span>;</span><br><span class="line">            findBest(heights,res,temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">furthestBuilding</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; heights, <span class="keyword">int</span> bricks, <span class="keyword">int</span> ladders)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;heights.size();i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> t = max(<span class="number">0</span>,heights[i] - heights[i - <span class="number">1</span>]);</span><br><span class="line">            temp.push_back(t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res = &#123;bricks,ladders&#125;;</span><br><span class="line">        findBest(temp,res,<span class="number">0</span>);</span><br><span class="line">        index = (index &lt;= heights.size() - <span class="number">1</span>) ? index : heights.size() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1643-第-K-条最小指令-Hard-「没完全看明白。后续还需要理解一下这个动态规划的思想-Mark一下」"><a href="#1643-第-K-条最小指令-Hard-「没完全看明白。后续还需要理解一下这个动态规划的思想-Mark一下」" class="headerlink" title="1643. 第 K 条最小指令. Hard 「没完全看明白。后续还需要理解一下这个动态规划的思想 Mark一下」"></a>1643. 第 K 条最小指令. Hard 「没完全看明白。后续还需要理解一下这个动态规划的思想 Mark一下」</h2><h3 id="使用动态规划-因为指令中的H，V字符的数目总数是确定的-「根据目标位置判断而来」-由于需要是排列好的数组-那么就可以这样判断："><a href="#使用动态规划-因为指令中的H，V字符的数目总数是确定的-「根据目标位置判断而来」-由于需要是排列好的数组-那么就可以这样判断：" class="headerlink" title="使用动态规划 因为指令中的H，V字符的数目总数是确定的 「根据目标位置判断而来」 由于需要是排列好的数组 那么就可以这样判断："></a>使用动态规划 因为指令中的H，V字符的数目总数是确定的 「根据目标位置判断而来」 由于需要是排列好的数组 那么就可以这样判断：</h3><pre><code> 一步步判断每一位应该是什么。如果第1位是H，那么剩余2H和2V的排列数量记作dp[2,2]，如果第一位是V，那么剩余3H和1V的排列记作dp[1,3]，此时有两种情况：1.k&gt;dp[2,2]，那么此时第一位就是V，同时要更新k为k-dp[2,2]，V的数量减1。2.k&lt;=dp[2,2]，那么此时第一位就是H，不需要更新k，H的数量减1。 然后就是如何用动态规划求解dp，显然当H和V中有一个数量只有1时，只有一种排列， 而其余情况就可以考虑先排一个H与先排一个V的和，也即：    dp[v,h] = dp[v-1,h]+dp[v,h-1]，按行更新即可。</code></pre><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">kthSmallestPath</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; destination, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">dp</span><span class="params">(destination[<span class="number">0</span>]+<span class="number">1</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(destination[<span class="number">1</span>]+<span class="number">1</span>,<span class="number">0</span>))</span></span>;</span><br><span class="line">        <span class="built_in">string</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">//更新dp</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; destination[<span class="number">0</span>]+<span class="number">1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; destination[<span class="number">1</span>]+<span class="number">1</span>; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(i ==<span class="number">0</span> || j == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    dp[i][j] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j] + dp[i][j<span class="number">-1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> h = destination[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> v = destination[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//求解，注意h和v的数量</span></span><br><span class="line">        <span class="keyword">while</span>(h&gt;<span class="number">0</span>||v&gt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(h &gt; <span class="number">0</span> &amp;&amp; v &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(k &lt;= dp[v][h<span class="number">-1</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                    result += <span class="string">&#x27;H&#x27;</span>;</span><br><span class="line">                    h--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    result += <span class="string">&#x27;V&#x27;</span>;</span><br><span class="line">                    k -= dp[v][h<span class="number">-1</span>];</span><br><span class="line">                    v--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(h &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                result += <span class="string">&#x27;H&#x27;</span>;</span><br><span class="line">                h--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                result += <span class="string">&#x27;V&#x27;</span>;</span><br><span class="line">                v--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1640-能否连接形成数组-Easy&quot;&gt;&lt;a href=&quot;#1640-能否连接形成数组-Easy&quot; class=&quot;headerlink&quot; title=&quot;1640. 能否连接形成数组. Easy&quot;&gt;&lt;/a&gt;1640. 能否连接形成数组. Easy&lt;/h2&gt;&lt;figu</summary>
      
    
    
    
    <category term="LeetCode" scheme="http://example.com/categories/LeetCode/"/>
    
    <category term="周赛" scheme="http://example.com/categories/LeetCode/%E5%91%A8%E8%B5%9B/"/>
    
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>语义分割论文总结</title>
    <link href="http://example.com/2020/10/28/%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2%E8%AE%BA%E6%96%87%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2020/10/28/%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2%E8%AE%BA%E6%96%87%E6%80%BB%E7%BB%93/</id>
    <published>2020-10-28T06:26:13.000Z</published>
    <updated>2020-11-02T03:34:30.742Z</updated>
    
    <content type="html"><![CDATA[<h1 id="各种卷积层的理解-：-参考链接"><a href="#各种卷积层的理解-：-参考链接" class="headerlink" title="各种卷积层的理解 ： 参考链接"></a>各种卷积层的理解 ： <a href="https://blog.csdn.net/gwplovekimi/article/details/89890510#%E6%B7%B1%E5%BA%A6%E5%8F%AF%E5%88%86%E7%A6%BB%E5%8D%B7%E7%A7%AF%EF%BC%88depthwise%20separable%20convolution%EF%BC%89">参考链接</a></h1><h1 id="语义分割方法"><a href="#语义分割方法" class="headerlink" title="语义分割方法"></a>语义分割方法</h1><p>语义分割 ： 传统方法（已经接近淘汰 性能不行） 和 深度学习方法「获得像素级别的segement map：对每一个像素点进行判断类别」</p><p>（1）最初的语义分割 全连接架构 ：<br>    *图像是切成块喂给深度模型的 像素级的分割 对像素进行分类<br>    *使用图像块的主要原因是因为 全连接层 需要固定大小的图像。</p><p>（2）全卷积架构（FCN）：<br>    *将网络全连接层用全卷积层取代 因此使任意图像大小的输入都变成可能<br>    *速度比Patch classification方法快很多<br>    *下采样操作 使得分辨率降低 削弱了位置信息 而语义分割中需要score map和原图对齐 因此需要丰富的位置信息「pooling池化操作是典型的下采样 其功能是扩大感受野因而能够很好地整合上下文信息 通俗的理解就是综合了更多的信息来进行决策」</p><p>（3）encoder-decoder架构 ：<br>     *针对之前的pooling产生的问题提出的<br>     *整体结构是先下采样再逐渐恢复 encoder由于pooling逐渐减少空间维度，而decoder逐渐恢复空间维度和细节信息。<br>     *通常从encoder到decoder还有shortcut connetction（捷径连接，也就是跨层连接）U-Net系列<br>     *可以更好的恢复边缘信息</p><p>（4）空洞卷积架构 （dilated/atrous） ：<br>     *这种结构 从根本上代替了pooling<br>     *可以保持空间分辨率，又可以扩大感受野因而可以很好地整合上下文信息。</p><p>（5）条件随机场（CRFs）：<br>     *对分割结果进行后处理来改善效果 DeepLab系列文章使用的就是这种方法</p><h1 id="语义分割各架构经典论文整理"><a href="#语义分割各架构经典论文整理" class="headerlink" title="语义分割各架构经典论文整理"></a>语义分割各架构经典论文整理</h1><h2 id="FCN架构-全卷积网络-："><a href="#FCN架构-全卷积网络-：" class="headerlink" title="FCN架构 全卷积网络 ："></a>FCN架构 全卷积网络 ：</h2><p> (1)使端对端的卷积语义分割网络变得流行起来。<br> (2)通过deconvolutional layers进行上采样。upsampling的意义在于将小尺寸的高维度feature map恢复回去，以便做pixelwise prediction，获得每个点的分类信息。=》 其实相当于一个Encode-Decode的过程。<br> (3)通过skip connection特征融合改善了上采样的粗糙度。使用的特征融合方式 ： 逐点相加 tf.add()</p><p>FCN结构及基本原理示意图：<br>不同大小的feature特征图 通过「上采样之后 逐点相加」 实现skip connection连接 特征融合<br><img src="/2020/10/28/%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2%E8%AE%BA%E6%96%87%E6%80%BB%E7%BB%93/FCN.jpg" alt="语义分割论文总结"></p><p>网络实验效果图：<br><img src="/2020/10/28/%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2%E8%AE%BA%E6%96%87%E6%80%BB%E7%BB%93/FCNResult.jpg" alt="语义分割论文总结"><br>效果：FCN-32s &lt; FCN-16s &lt; FCN-8s =》 使用 「多层feature融合」 有利于提高分割准确性。</p><p>上采样：<br> （1）Resize 直接缩放<br> （2）Deconvolutional layers 反卷积层 =》 反卷积层工作原理示意图：<br><img src="/2020/10/28/%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2%E8%AE%BA%E6%96%87%E6%80%BB%E7%BB%93/deconvolution.jpg" alt="语义分割论文总结"></p><p>FCN中的几点问题：<br> (1) 在conv1_1中添加了pad=100 原因 =》 经过多次pool得到的feature图缩小了32倍 如果不在conv1_1加入pad=100 那么对于小于192x192的输入图像 在反卷积恢复尺寸前已经feature map size = 0 所以在conv1_1添加pad=100的方法 解决输入图像大小的问题但是实际也引入很大的噪声</p><p> (2) 由于引入了pad=100 同时fc6卷积层也会改变feature map尺寸 那么真实的网络就不可能像原理图那样“完美1/2” 「即不能直接上采样 就可以逐点相加」解决方案 =》 引入crop层 axis参数指定从第几维往后开始裁剪  offset参数指定crop在height和width纬度的开始点</p><h2 id="U-Net-encoder-decoder架构-："><a href="#U-Net-encoder-decoder架构-：" class="headerlink" title="U-Net encoder-decoder架构 ："></a>U-Net encoder-decoder架构 ：</h2><p> (1)先下采样 后上采样 =》 使用的特征融合方式 ： 拼接 tf.concat()</p><p> (2)使用全卷积网络结构或是下采样的缺陷造成了分类问题出现了瓶颈 ： 主要缺陷一个是层级信息的丢失（跨层连接）；还有一个是小物体信息无法重建（下采样之后信息会丢失 即使反卷积也无法恢复）；再有一个是「池化层」不可学</p><h2 id="空洞卷积架构-Dilated-Atrous-convolution-："><a href="#空洞卷积架构-Dilated-Atrous-convolution-：" class="headerlink" title="空洞卷积架构 Dilated/Atrous convolution ："></a>空洞卷积架构 Dilated/Atrous convolution ：</h2><p> (1)在卷积核中添加空洞 空洞的地方填充0 不添加多余的参数且不使用pooling下采样（可能丢失部分信息）的同时 扩大了感受野<br> (2)网络架构有两种，一种是前端网络，另外一种是前端网络+上下文模块 =&gt; 上下文模块中级联了多种不同空洞率的空洞卷积，使得多尺度的上下文信息可以得到整合，从而改善前端网络预测的效果。需要注意的是前端网络和上下文模块是分开训练的，如果是联合在一起进行端对端的训练并不能改善性能。<br> (3)网络输出的分割图并不是和原始图像大小一样的，而是其1/8，需要对输出的分割图进行线性插值才能得到最终的分割结果。<br> (4)优势总结 ： 不添加多余参数 保证了特征映射的分辨率 可以获得更大的感受野<br> (5)存在的问题：<br>   空洞卷积到某一层之后 邻近的像素将会是从完全独立的子集中卷积得到了 相互之间缺乏相关性 =》 即局部信息丢失<br>   空洞卷积是稀疏采样 =》远距离获取的信息没有相关性 影响结果<br> (6)其卷积层的原理示意图：<br><img src="/2020/10/28/%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2%E8%AE%BA%E6%96%87%E6%80%BB%E7%BB%93/%E7%A9%BA%E6%B4%9E%E5%8D%B7%E7%A7%AF%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" alt="语义分割论文总结"></p><h2 id="DeepLab系列-条件随机场架构-CRFs-："><a href="#DeepLab系列-条件随机场架构-CRFs-：" class="headerlink" title="DeepLab系列 条件随机场架构 CRFs ："></a>DeepLab系列 条件随机场架构 CRFs ：</h2><p> (1)stride是特征图分辨率变小的主要原因 而设置stride&gt;1主要是为了增加感受野<br>    Deeplab中将stride设置成为1 使用空洞卷积达到增加感受野的效果（V1）<br> (2)条件随机场CFRs =》 在传统图像处理上做一个平滑 在决定一个位置的像素值时，能够考虑周围邻居的像素值，消除一些噪音（V1&amp;V2）<br> (3)针对多尺度融合提出结构 =》 ASPP「使用多尺度进行空洞卷积，再经过1<em>1的卷积之后连接起来」（V2） 结构示意图：<br><img src="/2020/10/28/%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2%E8%AE%BA%E6%96%87%E6%80%BB%E7%BB%93/ASPP.jpg" alt="语义分割论文总结"><br> (4)ASPP结构的改进（V3）=》添加了一个1</em>1的卷积和一个全局的平均池化(Image Pooling)<br> (5)HDC思想 =》锯齿形大小的空洞卷积步长stride [1,2,1]的rate<br> (6)Xception backbone（V3+） 添加了BN和ReLu层<br> (7)底层特征与高层特征进一步融合 级联空洞卷积（V3+）<br> (8)DeepLabV3+网络的整体结构图：<br><img src="/2020/10/28/%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2%E8%AE%BA%E6%96%87%E6%80%BB%E7%BB%93/DeepLabV3+.jpg" alt="语义分割论文总结"></p><h1 id="CVPR2020-语义分割论文整理"><a href="#CVPR2020-语义分割论文整理" class="headerlink" title="CVPR2020 语义分割论文整理"></a>CVPR2020 语义分割论文整理</h1><h2 id="Dual-Super-Resolution-Learning-for-Semantic-Segmentation-双边超分辨率学习语义分割"><a href="#Dual-Super-Resolution-Learning-for-Semantic-Segmentation-双边超分辨率学习语义分割" class="headerlink" title="Dual Super-Resolution Learning for Semantic Segmentation 双边超分辨率学习语义分割"></a>Dual Super-Resolution Learning for Semantic Segmentation 双边超分辨率学习语义分割</h2><p> Solution ： 在保证准确率至将其提高2-3个点的同时 保证了分割的准确率 保留了更多的高频信息 是分割中decoder部分上采样阶段的一种新的策略<br> What ： 解决的是模型计算量与模型性能之间的矛盾 输入较小尺寸的图片，让模型的绝大多数计算在较小的分辨率下进行以大大减少模型的计算量，然后借鉴后上采样超分辨率（Post-upsampling Super-resolution）的思路最后同时对语义分割输出以及图片进行超分辨<br><img src="/2020/10/28/%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2%E8%AE%BA%E6%96%87%E6%80%BB%E7%BB%93/Dual.jpg" alt="语义分割论文总结"><br> How ： （1）分割和超分共享编码器encoder<br>        （2）超分辨率和语义分割各自独立的解码器「特征相似性学习FA」 =》 语义分割解码器中添加了一个额外的上采样模块以生成最终的预测mask，比输入图像大2倍，充分利用gt并避免使用有效标签 预处理造成的信息丢失。 其中额外的语义分割上采样模块由一堆反卷积层组成，并且只需要较少的参数。<br>        （3）训练好后单图像超分辨 Decoder （黄色）可以丢掉，所以单图像超分辨 在 Inference 的时候不带来额外性能开销<br>        （4）语义分割用交叉熵损失函数，图像超分辨用 MSE 损失函数</p><h2 id="CascadePSP-Toward-Class-Agnostic-and-Very-High-Resolution-Segmentation-via-Global-and-Local-Refinement-通过全局和局部优化进行超高分辨率的图像分割"><a href="#CascadePSP-Toward-Class-Agnostic-and-Very-High-Resolution-Segmentation-via-Global-and-Local-Refinement-通过全局和局部优化进行超高分辨率的图像分割" class="headerlink" title="CascadePSP: Toward Class-Agnostic and Very High-Resolution Segmentation via Global and Local Refinement 通过全局和局部优化进行超高分辨率的图像分割"></a>CascadePSP: Toward Class-Agnostic and Very High-Resolution Segmentation via Global and Local Refinement 通过全局和局部优化进行超高分辨率的图像分割</h2><p>Solution ： 不使用任何高分辨率训练数据的高分辨率分割问题 在任何可能的情况下优化和修正局部边界。可以显著改善分割边界的精度<br> What ： 解决的是高分辨率场景下做语义分割的问题 难以获得高分辨率的语义分割训练数据 在高分辨率图像上训练模型，需要更大的感受野来捕获足够的语义。看似可行的解决方法包括下采样和裁剪，但前者删除细节，而后者破坏图像上下文。提出一种方法可以完成将任意给定的分割从低分辨率细化到高分辨率，且模型是独立训练的，可以很容易地附加到任何现有的方法中来改进它们的分割，可以生成更精细和更精确的对象分割掩码。<br><img src="/2020/10/28/%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2%E8%AE%BA%E6%96%87%E6%80%BB%E7%BB%93/CascadePSP.jpg" alt="语义分割论文总结"><br> How ： （1）精细模块（RM）<br>        （2）多级级联<br>        （3）全局和局部级联求精 =》 全局级联 ：从第一级到最后一级 输入由初始分割和前一级的所有输出组成 逐步修正分割错误同时在初始分割中保持细节<br>            需要输入一个初始的分割mask，这个mask可以由已有的其他分割模型得到，即CascadePSP其实是在一个粗糙的分割结果上进行微调，让边界更准确。<br> How Much :<br><img src="/2020/10/28/%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2%E8%AE%BA%E6%96%87%E6%80%BB%E7%BB%93/CasecadeResult.jpg" alt="语义分割论文总结"><br>存在的缺陷 CasecadePSP网络的边缘处理结果很大程度上依赖于分割网络的初步处理结果 举一个失败案例：DeeplabV3+错误地将脚的大区域标记为前景。尽管我们的改进仍然很好地依附于颜色边界，但由于缺乏语义信息，它产生了错误的分割。<br><img src="/2020/10/28/%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2%E8%AE%BA%E6%96%87%E6%80%BB%E7%BB%93/CasecadeError.jpg" alt="语义分割论文总结"></p><h2 id="Learning-Dynamic-Routing-for-Semantic-Segmentation-语义分割动态路径的学习"><a href="#Learning-Dynamic-Routing-for-Semantic-Segmentation-语义分割动态路径的学习" class="headerlink" title="Learning Dynamic Routing for Semantic Segmentation 语义分割动态路径的学习"></a>Learning Dynamic Routing for Semantic Segmentation 语义分割动态路径的学习</h2><p>Solution ： 随着输入数据的不同，网络也会自适应地生成不同的结构进行特征编码。利用该方法，网络可以将不同尺寸的物体（或背景）分配到对应分辨率的层级上，以实现有针对性的特征变换。<br> What ： 解决的是图像中尺寸不一的物体及背景区域这种尺寸分布的差异给特征表示和关系建模带来的困难。<br><img src="/2020/10/28/%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2%E8%AE%BA%E6%96%87%E6%80%BB%E7%BB%93/DynamicRouting.jpg" alt="语义分割论文总结"><br><img src="/2020/10/28/%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2%E8%AE%BA%E6%96%87%E6%80%BB%E7%BB%93/DynamicResult.jpg" alt="语义分割论文总结"><br> How ： （1）三种路径选择（up，down，keep）<br>        （2）计算损失函数进行网络优化的过程中 考虑到资源算力消耗的约束<br> How Much : 在计算力相似的情况下 较先前精心设计过的BiSeNet分割网络mIoU高出了3.8%，用更少的计算消耗取得了与当前最佳模型相当的表现</p><h2 id="Single-Stage-Semantic-Segmentation-from-Image-Labels"><a href="#Single-Stage-Semantic-Segmentation-from-Image-Labels" class="headerlink" title="Single-Stage Semantic Segmentation from Image Labels"></a>Single-Stage Semantic Segmentation from Image Labels</h2><p>单阶段的分割，不需要先检测再分割 ； 不需要有像素级别的标注信息，只需要图像层次的类别信息就能训练。<br>新方法提高了在弱监督环境下提高语义分割的准确性能力，但是以增加复杂性和复杂的多阶段训练程序作为代价的；<br>且属于针对提升弱监督方法准确率的 对于弱监督分割的准确率有提升 但是效果还是不能与全监督的方法媲美 不考虑</p><h2 id="Cars-Can’t-Fly-up-in-the-Sky-Improving-Urban-Scene-Segmentation-via-Height-driven-Attention-Networks"><a href="#Cars-Can’t-Fly-up-in-the-Sky-Improving-Urban-Scene-Segmentation-via-Height-driven-Attention-Networks" class="headerlink" title="Cars Can’t Fly up in the Sky: Improving Urban-Scene Segmentation via Height-driven Attention Networks"></a>Cars Can’t Fly up in the Sky: Improving Urban-Scene Segmentation via Height-driven Attention Networks</h2><p>利用了城市场景图像的内在特征，并提出了一个通用的附加模块，称为高度驱动的注意力网络（HANet），用于改善城市场景图像的语义分割。<br>与项目中的人像分割需求不符合 不考虑</p><h2 id="Strip-Pooling-Rethinking-Spatial-Pooling-for-Scene-Parsing-条纹池化"><a href="#Strip-Pooling-Rethinking-Spatial-Pooling-for-Scene-Parsing-条纹池化" class="headerlink" title="Strip Pooling: Rethinking Spatial Pooling for Scene Parsing 条纹池化"></a>Strip Pooling: Rethinking Spatial Pooling for Scene Parsing 条纹池化</h2><p>将传统方形卷积 更改为 长条形状的kernel进行替换 =》 可以极大增大感受野，从而可以使得那些相距较远的部分也能被网络捕获到<br>             使用了长条形的kernel可以使得池化操作更加关注一片区域，从而避免常规kernel带来的无关信息引入<br>对于在自动驾驶中进行车道线等目标的分割应用（场景中长条形目标较多）会有很大的帮助 对于人像分割的提升从思想上去推断应该提升不大</p><h2 id="Learning-Texture-Invariant-Representation-for-Domain-Adaptation-of-Semantic-Segmentation-为语义分割的领域匹配学习纹理不变表示法"><a href="#Learning-Texture-Invariant-Representation-for-Domain-Adaptation-of-Semantic-Segmentation-为语义分割的领域匹配学习纹理不变表示法" class="headerlink" title="Learning Texture Invariant Representation for Domain Adaptation of Semantic Segmentation 为语义分割的领域匹配学习纹理不变表示法"></a>Learning Texture Invariant Representation for Domain Adaptation of Semantic Segmentation 为语义分割的领域匹配学习纹理不变表示法</h2><p>使用 「合成数据」 解决 「为语义分割注释像素级标签很费力」的问题 考虑到两个域之间的基本差异作为纹理，提出一种适应目标域纹理的方法 使用样式转移算法使合成图像的纹理多样化；生成的图像的各种纹理可防止分割模型过度适合一种特定的合成纹理；然后通过自我训练对模型进行微调，以直接监督目标纹理<br>合成域和真实域之间有域差距，使用合成数据训练的模型推广到真实数据具有挑战性</p><h2 id="MSeg-A-Composite-Dataset-for-Multi-domain-Semantic-Segmentation-用于多域语义分割的复合数据集"><a href="#MSeg-A-Composite-Dataset-for-Multi-domain-Semantic-Segmentation-用于多域语义分割的复合数据集" class="headerlink" title="MSeg: A Composite Dataset for Multi-domain Semantic Segmentation 用于多域语义分割的复合数据集"></a>MSeg: A Composite Dataset for Multi-domain Semantic Segmentation 用于多域语义分割的复合数据集</h2><p>MSeg（一种组合数据集）：一个可以统一来自不同领域的语义细分数据集<br>调和分类法和注释操作并带来像素级，重新标记多个注释来对齐图像的对象蒙版，组合的数据集可训练单个语义细分模型<br>相当于重新标记数据集 不考虑</p><h2 id="Unsupervised-Intra-domain-Adaptation-for-Semantic-Segmentation-through-Self-Supervision-通过自我监督实现语义分割的无监督域内适应"><a href="#Unsupervised-Intra-domain-Adaptation-for-Semantic-Segmentation-through-Self-Supervision-通过自我监督实现语义分割的无监督域内适应" class="headerlink" title="Unsupervised Intra-domain Adaptation for Semantic Segmentation through Self-Supervision 通过自我监督实现语义分割的无监督域内适应"></a>Unsupervised Intra-domain Adaptation for Semantic Segmentation through Self-Supervision 通过自我监督实现语义分割的无监督域内适应</h2><p>进一步考虑领域适应的问题（训练集与真实集） 以前的领域适应只考虑了inter-adaptation, 也就是虚拟-真实之间，而没有考虑intra-adaptation（真实数据中内部之间的分布也有差异），所以作者进一步考虑了这个问题。<br>第一阶段，就是利用对抗训练，使得目标域的语义分割确定性逼近源域语义分割<br>根据第一阶段所输出的不确定性，选定确定性高的（熵低）的真实图片（简单的图片）及其预测标签作为伪标签，当作此时的源域，然后那些困难的作为目标域，再来一次对抗训练。<br>问题1：基于卷积神经网络的方法在语义分割方面严重依赖劳动密集型的带注释数据<br>解决方案1：把从图形引擎生成的自动注释数据用于训练分割模型<br>问题2：从合成数据训练的模型很难转换为真实图像<br>方案2：考虑将模型从源数据直接适配到未标记的目标数据以减少域间差距<br>方案2的局限性：未考虑目标数据本身之间的较大分配差距（域内差距）<br>方案3：提出了两步自监督域自适应方法以最小化域间和域内的间隙<br>方案3的流程：首先进行模型的域间适配，使用基于熵的排名功能将目标划分为容易和困难；为减少域内间隙，从易分割到硬分割采用自监督自适应技术</p><h2 id="Self-supervised-Equivariant-Attention-Mechanism-for-Weakly-Supervised-Semantic-Segmentation-自监督等变注意机制用于弱监督语义分割"><a href="#Self-supervised-Equivariant-Attention-Mechanism-for-Weakly-Supervised-Semantic-Segmentation-自监督等变注意机制用于弱监督语义分割" class="headerlink" title="Self-supervised Equivariant Attention Mechanism for Weakly Supervised Semantic Segmentation 自监督等变注意机制用于弱监督语义分割"></a>Self-supervised Equivariant Attention Mechanism for Weakly Supervised Semantic Segmentation 自监督等变注意机制用于弱监督语义分割</h2><p>应用于弱监督语义分割 针对缺少标注的数据集 效果无法和全面监督语义分割相媲美 不考虑</p><h1 id="CVPR2020-视频目标分割论文整理"><a href="#CVPR2020-视频目标分割论文整理" class="headerlink" title="CVPR2020 视频目标分割论文整理"></a>CVPR2020 视频目标分割论文整理</h1><p>很多视频分割算法是依赖光流和实例分割中训练好的模型 使得性能无法与传统模型媲美 考虑到帧之间的相关性和时序性采用新的传导方式直接利用到视频帧上 </p><h2 id="A-Transductive-Approach-for-Video-Object-Segmentation-新型标签传播方式"><a href="#A-Transductive-Approach-for-Video-Object-Segmentation-新型标签传播方式" class="headerlink" title="A Transductive Approach for Video Object Segmentation  新型标签传播方式"></a>A Transductive Approach for Video Object Segmentation  新型标签传播方式</h2><p>使用一种简单而强大的传导方式来代替现有的光流方式：采用标签传播方式，其中像素标签基于嵌入空间中的特征相似性向前传递，并且是以整体方式传播时间信息，同时考虑长时间出现的物体。<br>在infer的时候需要存储很多之前帧的特征图与标签 还需要进行很多矩阵相关性的计算 可能会拖慢算法流程的速度 </p><h2 id="Temporally-Distributed-Networks-for-Fast-Video-Segmentation"><a href="#Temporally-Distributed-Networks-for-Fast-Video-Segmentation" class="headerlink" title="Temporally Distributed Networks for Fast Video Segmentation"></a>Temporally Distributed Networks for Fast Video Segmentation</h2><p>更快的速度更低的延迟更先进的精度<br>为了减少冗余计算，一种合理的方法是仅在关键帧上使用强图像分割模型，对其他帧重用高级特征，由于帧之间的运动而不对齐（其他帧相对于关键帧的空间不对称很难弥补），无法达到最优的效果。<br>利用视频的时序性 可以在一定的时序范围内使用浅层的网络进行特征抽取，之后在经过组合可以达到深层网络输出特征的效果 使用一个新的APM（attention propagation module）来实现，减少分割目标移动对分割性能的影响 引入了知识蒸馏的概念，从使其可以在浅层网络输出特征与组合特征的两个层面进行知识迁移 在Cityscapes/CamVid/NYUD-v2数据集上取得了不错的效果</p><h2 id="State-Aware-Tracker-for-Real-Time-Video-Object-Segmentation-状态感知跟踪器"><a href="#State-Aware-Tracker-for-Real-Time-Video-Object-Segmentation-状态感知跟踪器" class="headerlink" title="State-Aware Tracker for Real-Time Video Object Segmentation  状态感知跟踪器"></a>State-Aware Tracker for Real-Time Video Object Segmentation  状态感知跟踪器</h2><p>在DAVIS验证集上快于其他方法 达到了70FPS 在给出高精确的结果的同时实现实时分割<br>SAT的推理分为三步：1）分割，2）估计，3）反馈。<br>首先，联合分割网络融合相似性编码器、显著性编码器和全局特征的特征，生成一个掩膜预测；<br>第二，状态估计器评估分割结果，通过状态值描述当前状态，并评估状态异常与否；<br>第三，构建两个反馈回路，针对不同状态进行自适应。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;各种卷积层的理解-：-参考链接&quot;&gt;&lt;a href=&quot;#各种卷积层的理解-：-参考链接&quot; class=&quot;headerlink&quot; title=&quot;各种卷积层的理解 ： 参考链接&quot;&gt;&lt;/a&gt;各种卷积层的理解 ： &lt;a href=&quot;https://blog.csdn.net</summary>
      
    
    
    
    <category term="AI" scheme="http://example.com/categories/AI/"/>
    
    <category term="CV" scheme="http://example.com/categories/AI/CV/"/>
    
    
    <category term="AI" scheme="http://example.com/tags/AI/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="语义分割" scheme="http://example.com/tags/%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer</title>
    <link href="http://example.com/2020/10/21/%E5%89%91%E6%8C%87Offer/"/>
    <id>http://example.com/2020/10/21/%E5%89%91%E6%8C%87Offer/</id>
    <published>2020-10-21T05:22:38.000Z</published>
    <updated>2020-11-02T07:38:04.364Z</updated>
    
    <content type="html"><![CDATA[<h1 id="重建二叉树专题"><a href="#重建二叉树专题" class="headerlink" title="重建二叉树专题"></a>重建二叉树专题</h1><h2 id="剑指-Offer-07-重建二叉树-amp-105-从前序与中序遍历序列构造二叉树。双指针加树的结构分析"><a href="#剑指-Offer-07-重建二叉树-amp-105-从前序与中序遍历序列构造二叉树。双指针加树的结构分析" class="headerlink" title="剑指 Offer 07. 重建二叉树  &amp;  105. 从前序与中序遍历序列构造二叉树。双指针加树的结构分析"></a>剑指 Offer 07. 重建二叉树  &amp;  105. 从前序与中序遍历序列构造二叉树。双指针加树的结构分析</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">build</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; preorder,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; inorder,<span class="keyword">int</span> preStart,<span class="keyword">int</span> preEnd,<span class="keyword">int</span> inStart,<span class="keyword">int</span> inEnd)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preorder.size() == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">if</span>(preStart &gt; preEnd || inStart &gt; inEnd) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">if</span>(preorder.size() != inorder.size()) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        TreeNode* root = <span class="keyword">new</span> TreeNode(preorder[preStart]);</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = inStart;i&lt;=inEnd;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(inorder[i] == preorder[preStart])&#123;</span><br><span class="line">                index = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        root-&gt;left = build(preorder,inorder,preStart + <span class="number">1</span>,preStart + (index - inStart),inStart,index - <span class="number">1</span>);</span><br><span class="line">        root-&gt;right = build(preorder,inorder,preStart + (index - inStart )+ <span class="number">1</span>,preEnd,index + <span class="number">1</span>,inEnd);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">TreeNode* <span class="title">buildTree</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; preorder, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; inorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> build(preorder,inorder,<span class="number">0</span>,preorder.size() - <span class="number">1</span>,<span class="number">0</span>,inorder.size() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="剑指-Offer-12-矩阵中的路径-带附加条件的深度优先搜索"><a href="#剑指-Offer-12-矩阵中的路径-带附加条件的深度优先搜索" class="headerlink" title="剑指 Offer 12. 矩阵中的路径 带附加条件的深度优先搜索"></a>剑指 Offer 12. 矩阵中的路径 带附加条件的深度优先搜索</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; res = &#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">int</span> endX;</span><br><span class="line">    <span class="keyword">int</span> endY;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">ifExist</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; board,<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;&gt;&amp; used,<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="built_in">string</span> s,<span class="keyword">int</span> startIndex)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x &gt;= endX || x &lt; <span class="number">0</span> || y &gt;= endY || y &lt; <span class="number">0</span> || used[x][y] == <span class="literal">true</span> || board[x][y] != s[startIndex])&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(startIndex == s.size() - <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        used[x][y] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> r : res)&#123;</span><br><span class="line">            <span class="keyword">int</span> dx = x + r[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> dy = y + r[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(ifExist(board,used,dx,dy,s,startIndex + <span class="number">1</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        used[x][y] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">exist</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; board, <span class="built_in">string</span> word)</span> </span>&#123;</span><br><span class="line">        endX = board.size();</span><br><span class="line">        endY = board[<span class="number">0</span>].size();</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;&gt; <span class="title">used</span><span class="params">(board.size(),<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;(board[<span class="number">0</span>].size(),<span class="literal">false</span>))</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;endX;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;endY;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(board[i][j] == word[<span class="number">0</span>])&#123;</span><br><span class="line">                    <span class="keyword">if</span>(ifExist(board,used,i,j,word,<span class="number">0</span>))&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="剑指-Offer-13-机器人的运动范围-带附加条件的深度优先搜索"><a href="#剑指-Offer-13-机器人的运动范围-带附加条件的深度优先搜索" class="headerlink" title="剑指 Offer 13. 机器人的运动范围 带附加条件的深度优先搜索"></a>剑指 Offer 13. 机器人的运动范围 带附加条件的深度优先搜索</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> endX,endY;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; res = &#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">ifCanPass</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> target = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(x != <span class="number">0</span>)&#123;</span><br><span class="line">            target += (x % <span class="number">10</span>);</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(y != <span class="number">0</span>)&#123;</span><br><span class="line">            target += (y % <span class="number">10</span>);</span><br><span class="line">            y /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(target &lt;= k) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;&gt;&amp; pass,<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x &lt; <span class="number">0</span> || y &lt; <span class="number">0</span> || x &gt;= endX || y &gt;= endY || pass[x][y] == <span class="literal">true</span> || !(ifCanPass(x,y,k)))&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pass[x][y] = <span class="literal">true</span>;</span><br><span class="line">        ans ++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> r : res)&#123;</span><br><span class="line">            <span class="keyword">int</span> dx = x + r[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> dy = y + r[<span class="number">1</span>];</span><br><span class="line">            dfs(pass,dx,dy,k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">movingCount</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        endX = m;</span><br><span class="line">        endY = n;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;&gt; <span class="title">pass</span><span class="params">(m,<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;(n,<span class="literal">false</span>))</span></span>;</span><br><span class="line">        dfs(pass,<span class="number">0</span>,<span class="number">0</span>,k);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="剑指-Offer-32-I-从上到下打印二叉树-树的普通层序遍历-广度优先搜索"><a href="#剑指-Offer-32-I-从上到下打印二叉树-树的普通层序遍历-广度优先搜索" class="headerlink" title="剑指 Offer 32 - I. 从上到下打印二叉树 树的普通层序遍历  广度优先搜索"></a>剑指 Offer 32 - I. 从上到下打印二叉树 树的普通层序遍历  广度优先搜索</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">levelOrder</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span> ans;</span><br><span class="line">        <span class="built_in">queue</span>&lt;TreeNode*&gt; q;</span><br><span class="line">        q.push(root);</span><br><span class="line">        <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">            <span class="keyword">int</span> size = q.size();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">                TreeNode* top = q.front();</span><br><span class="line">                q.pop();</span><br><span class="line">                ans.push_back(top-&gt;val);</span><br><span class="line">                <span class="keyword">if</span>(top-&gt;left) q.push(top-&gt;left);</span><br><span class="line">                <span class="keyword">if</span>(top-&gt;right) q.push(top-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="剑指-Offer-32-II-从上到下打印二叉树-II-树的普通层序遍历-广度优先搜索"><a href="#剑指-Offer-32-II-从上到下打印二叉树-II-树的普通层序遍历-广度优先搜索" class="headerlink" title="剑指 Offer 32 - II. 从上到下打印二叉树 II 树的普通层序遍历  广度优先搜索"></a>剑指 Offer 32 - II. 从上到下打印二叉树 II 树的普通层序遍历  广度优先搜索</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">layerDfs</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">queue</span>&lt;TreeNode*&gt; q;</span><br><span class="line">        q.push(root);</span><br><span class="line">        <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">            <span class="keyword">int</span> size = q.size();</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">                TreeNode* t = q.front();</span><br><span class="line">                q.pop();</span><br><span class="line">                temp.push_back(t-&gt;val);</span><br><span class="line">                <span class="keyword">if</span>(t-&gt;left) q.push(t-&gt;left);</span><br><span class="line">                <span class="keyword">if</span>(t-&gt;right) q.push(t-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(temp.size() != <span class="number">0</span>)&#123;</span><br><span class="line">                ans.push_back(temp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">levelOrder</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        layerDfs(root);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="剑指-Offer-32-III-从上到下打印二叉树-III-树的普通层序遍历-广度优先搜索-数组的逆向输出"><a href="#剑指-Offer-32-III-从上到下打印二叉树-III-树的普通层序遍历-广度优先搜索-数组的逆向输出" class="headerlink" title="剑指 Offer 32 - III. 从上到下打印二叉树 III 树的普通层序遍历  广度优先搜索 + 数组的逆向输出"></a>剑指 Offer 32 - III. 从上到下打印二叉树 III 树的普通层序遍历  广度优先搜索 + 数组的逆向输出</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root== <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">queue</span>&lt;TreeNode*&gt; q;</span><br><span class="line">        q.push(root);</span><br><span class="line">        <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">            <span class="keyword">int</span> size = q.size();</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">                TreeNode* top = q.front();</span><br><span class="line">                q.pop();</span><br><span class="line">                temp.push_back(top-&gt;val);</span><br><span class="line">                <span class="keyword">if</span>(top-&gt;left) q.push(top-&gt;left);</span><br><span class="line">                <span class="keyword">if</span>(top-&gt;right) q.push(top-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(index % <span class="number">2</span> != <span class="number">0</span>)&#123;</span><br><span class="line">                reverse(temp.begin(),temp.end());</span><br><span class="line">            &#125;</span><br><span class="line">            index ++;</span><br><span class="line">            ans.push_back(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">levelOrder</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        bfs(root);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="剑指-Offer-33-二叉搜索树的后序遍历序列-利用树后序数组的结构来进行判断（左子树-lt-根节点-lt-右子树）"><a href="#剑指-Offer-33-二叉搜索树的后序遍历序列-利用树后序数组的结构来进行判断（左子树-lt-根节点-lt-右子树）" class="headerlink" title="剑指 Offer 33. 二叉搜索树的后序遍历序列.  利用树后序数组的结构来进行判断（左子树 &lt; 根节点 &lt; 右子树）"></a>剑指 Offer 33. 二叉搜索树的后序遍历序列.  利用树后序数组的结构来进行判断（左子树 &lt; 根节点 &lt; 右子树）</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">verifyPostorder</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; postorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(postorder.size() == <span class="number">0</span> || postorder.size() == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">int</span> temp = postorder[postorder.size() - <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; left;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; right;</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;postorder.size() - <span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(postorder[i] &lt; temp &amp;&amp; flag == <span class="literal">false</span>)&#123;</span><br><span class="line">                left.push_back(postorder[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(postorder[i] &gt; temp)&#123;</span><br><span class="line">                right.push_back(postorder[i]);</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> verifyPostorder(left) &amp;&amp; verifyPostorder(right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="剑指-Offer-34-二叉树中和为某一值的路径-递归深度搜索"><a href="#剑指-Offer-34-二叉树中和为某一值的路径-递归深度搜索" class="headerlink" title="剑指 Offer 34. 二叉树中和为某一值的路径.  递归深度搜索"></a>剑指 Offer 34. 二叉树中和为某一值的路径.  递归深度搜索</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">    <span class="keyword">int</span> target;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">findPath</span><span class="params">(TreeNode* root,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp,<span class="keyword">int</span> res)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        temp.push_back(root-&gt;val);</span><br><span class="line">        res += root-&gt;val;</span><br><span class="line">        <span class="keyword">if</span>(res == target &amp;&amp; root-&gt;left == <span class="literal">NULL</span> &amp;&amp; root-&gt;right == <span class="literal">NULL</span>)&#123;</span><br><span class="line">            ans.push_back(temp);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        findPath(root-&gt;left,temp,res);</span><br><span class="line">        findPath(root-&gt;right,temp,res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">pathSum</span><span class="params">(TreeNode* root, <span class="keyword">int</span> sum)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp;</span><br><span class="line">        target = sum;</span><br><span class="line">        findPath(root,temp,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="剑指-Offer-27-二叉树的镜像"><a href="#剑指-Offer-27-二叉树的镜像" class="headerlink" title="剑指 Offer 27. 二叉树的镜像."></a>剑指 Offer 27. 二叉树的镜像.</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mirrorAction</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">        TreeNode* temp = root-&gt;left;</span><br><span class="line">        root-&gt;left = root-&gt;right;</span><br><span class="line">        root-&gt;right = temp;</span><br><span class="line">        mirrorAction(root-&gt;left);</span><br><span class="line">        mirrorAction(root-&gt;right);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">TreeNode* <span class="title">mirrorTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        mirrorAction(root);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="剑指-Offer-39-数组中出现次数超过一半的数字"><a href="#剑指-Offer-39-数组中出现次数超过一半的数字" class="headerlink" title="剑指 Offer 39. 数组中出现次数超过一半的数字."></a>剑指 Offer 39. 数组中出现次数超过一半的数字.</h2> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        sort(nums.begin(),nums.end());</span><br><span class="line">        <span class="keyword">int</span> index = nums.size() / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> temp = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;nums.size();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] == nums[i<span class="number">-1</span>])&#123;</span><br><span class="line">                temp ++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(temp &gt; index)&#123;</span><br><span class="line">                    <span class="keyword">return</span> nums[i<span class="number">-1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                temp = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums[nums.size() - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="剑指-Offer-15-二进制中1的个数-位运算"><a href="#剑指-Offer-15-二进制中1的个数-位运算" class="headerlink" title="剑指 Offer 15. 二进制中1的个数 位运算"></a>剑指 Offer 15. 二进制中1的个数 位运算</h2> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="keyword">uint32_t</span> n)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">32</span>;i++)&#123;</span><br><span class="line">          <span class="keyword">if</span>((n &gt;&gt; i) &amp; <span class="number">0x00000001</span> == <span class="number">1</span>)&#123;</span><br><span class="line">              ans ++;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; </span><br><span class="line">      <span class="keyword">return</span> ans; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="剑指-Offer-14-I-剪绳子-数学公式求导计算极大值点"><a href="#剑指-Offer-14-I-剪绳子-数学公式求导计算极大值点" class="headerlink" title="剑指 Offer 14- I. 剪绳子 数学公式求导计算极大值点"></a>剑指 Offer 14- I. 剪绳子 数学公式求导计算极大值点</h2><p><img src="/2020/10/21/%E5%89%91%E6%8C%87Offer/%E5%89%AA%E7%BB%B3%E5%AD%90.jpg" alt="剑指Offer"><br> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">cuttingRope</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">3</span>) <span class="keyword">return</span> n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(n &gt; <span class="number">4</span>)&#123;</span><br><span class="line">            ans *= <span class="number">3</span>;</span><br><span class="line">            n -= <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans * n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="剑指-Offer-14-II-剪绳子-II-数学公式求导计算极大值点-与之前那道题同理"><a href="#剑指-Offer-14-II-剪绳子-II-数学公式求导计算极大值点-与之前那道题同理" class="headerlink" title="剑指 Offer 14- II. 剪绳子 II 数学公式求导计算极大值点 与之前那道题同理"></a>剑指 Offer 14- II. 剪绳子 II 数学公式求导计算极大值点 与之前那道题同理</h2> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">cuttingRope</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">3</span>) <span class="keyword">return</span> n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">long</span> ans = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(n &gt; <span class="number">4</span>)&#123;</span><br><span class="line">            ans = ((ans % <span class="number">1000000007</span>) * <span class="number">3</span>) % <span class="number">1000000007</span>;</span><br><span class="line">            n -= <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ((ans % <span class="number">1000000007</span>) * (n % <span class="number">1000000007</span>)) % <span class="number">1000000007</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="剑指-Offer-18-删除链表的节点-在整体链表之前加入一个辅助的空白链表节点-考虑删除节点是原链表头节点的情况"><a href="#剑指-Offer-18-删除链表的节点-在整体链表之前加入一个辅助的空白链表节点-考虑删除节点是原链表头节点的情况" class="headerlink" title="剑指 Offer 18. 删除链表的节点 在整体链表之前加入一个辅助的空白链表节点 考虑删除节点是原链表头节点的情况"></a>剑指 Offer 18. 删除链表的节点 在整体链表之前加入一个辅助的空白链表节点 考虑删除节点是原链表头节点的情况</h2> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteNode</span><span class="params">(ListNode* head, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        ListNode* newHead = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        newHead-&gt;next = head;</span><br><span class="line">        ListNode* temp = newHead;</span><br><span class="line">        <span class="keyword">while</span>(temp-&gt;next != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(temp-&gt;next-&gt;val == val)&#123;</span><br><span class="line">                temp-&gt;next = temp-&gt;next-&gt;next;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newHead-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="剑指-Offer-21-调整数组顺序使奇数位于偶数前面-双指针记录奇数和偶数的位置-时间复杂度超高-（由于奇数放在偶数前面-所以慢指针指向数组头用来记录奇数-快指针指向数组尾用来记录偶数）"><a href="#剑指-Offer-21-调整数组顺序使奇数位于偶数前面-双指针记录奇数和偶数的位置-时间复杂度超高-（由于奇数放在偶数前面-所以慢指针指向数组头用来记录奇数-快指针指向数组尾用来记录偶数）" class="headerlink" title="剑指 Offer 21. 调整数组顺序使奇数位于偶数前面.  双指针记录奇数和偶数的位置 时间复杂度超高 （由于奇数放在偶数前面 所以慢指针指向数组头用来记录奇数 快指针指向数组尾用来记录偶数）"></a>剑指 Offer 21. 调整数组顺序使奇数位于偶数前面.  双指针记录奇数和偶数的位置 时间复杂度超高 （由于奇数放在偶数前面 所以慢指针指向数组头用来记录奇数 快指针指向数组尾用来记录偶数）</h2> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">exchange</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> slow = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> fast = nums.size() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(slow &lt; fast)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[slow] % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; nums[fast] % <span class="number">2</span> == <span class="number">1</span>)&#123;</span><br><span class="line">                swap(nums[slow],nums[fast]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[slow] % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; nums[fast] % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                fast --;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[slow] % <span class="number">2</span> == <span class="number">1</span> &amp;&amp; nums[fast] % <span class="number">2</span> == <span class="number">1</span>)&#123;</span><br><span class="line">                slow ++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                slow ++;</span><br><span class="line">                fast --;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="剑指-Offer-22-链表中倒数第k个节点-双指针-加一个辅助链表节点"><a href="#剑指-Offer-22-链表中倒数第k个节点-双指针-加一个辅助链表节点" class="headerlink" title="剑指 Offer 22. 链表中倒数第k个节点. 双指针 + 加一个辅助链表节点"></a>剑指 Offer 22. 链表中倒数第k个节点. 双指针 + 加一个辅助链表节点</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">getKthFromEnd</span><span class="params">(ListNode* head, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        ListNode* newHead = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        newHead-&gt;next = head;</span><br><span class="line">        ListNode* fast = newHead;</span><br><span class="line">        ListNode* slow = newHead;</span><br><span class="line">        <span class="keyword">while</span>(k != <span class="number">0</span>)&#123;</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">            k --;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="剑指-Offer-24-反转链表-更改链表节点的指针指向-一次遍历即可得到结果"><a href="#剑指-Offer-24-反转链表-更改链表节点的指针指向-一次遍历即可得到结果" class="headerlink" title="剑指 Offer 24. 反转链表  更改链表节点的指针指向  一次遍历即可得到结果"></a>剑指 Offer 24. 反转链表  更改链表节点的指针指向  一次遍历即可得到结果</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode* tail = <span class="literal">NULL</span>;</span><br><span class="line">        ListNode* temp = head;</span><br><span class="line">        <span class="keyword">while</span>(temp != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            ListNode* next = temp-&gt;next;</span><br><span class="line">            temp-&gt;next = tail;</span><br><span class="line">            tail = temp;</span><br><span class="line">            temp = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tail;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="剑指-Offer-25-合并两个排序的链表-链表常见题目-两个指针对应两个链表-遍历求结果"><a href="#剑指-Offer-25-合并两个排序的链表-链表常见题目-两个指针对应两个链表-遍历求结果" class="headerlink" title="剑指 Offer 25. 合并两个排序的链表 链表常见题目 两个指针对应两个链表 遍历求结果"></a>剑指 Offer 25. 合并两个排序的链表 链表常见题目 两个指针对应两个链表 遍历求结果</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        ListNode* temp1 = l1;</span><br><span class="line">        ListNode* temp2 = l2;</span><br><span class="line">        ListNode* newHead = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode* temp = newHead;</span><br><span class="line">        <span class="keyword">while</span>(temp1 &amp;&amp; temp2)&#123;</span><br><span class="line">            <span class="keyword">if</span>(temp1-&gt;val &lt;= temp2-&gt;val)&#123;</span><br><span class="line">                temp-&gt;next = temp1;</span><br><span class="line">                temp1 = temp1-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                temp-&gt;next = temp2;</span><br><span class="line">                temp2 = temp2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(temp1)&#123;</span><br><span class="line">            temp-&gt;next = temp1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(temp2)&#123;</span><br><span class="line">            temp-&gt;next = temp2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newHead-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="剑指-Offer-31-栈的压入、弹出序列-使用栈结构进行简单模拟"><a href="#剑指-Offer-31-栈的压入、弹出序列-使用栈结构进行简单模拟" class="headerlink" title="剑指 Offer 31. 栈的压入、弹出序列.  使用栈结构进行简单模拟"></a>剑指 Offer 31. 栈的压入、弹出序列.  使用栈结构进行简单模拟</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">validateStackSequences</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; pushed, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; popped)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; st;</span><br><span class="line">        <span class="keyword">int</span> n = popped.size();</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;pushed.size();i++)&#123;</span><br><span class="line">            st.push(pushed[i]);</span><br><span class="line">            <span class="keyword">while</span>(!st.empty() &amp;&amp; j &lt; n &amp;&amp; st.top() == popped[j])&#123;</span><br><span class="line">                st.pop();</span><br><span class="line">                j ++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> st.empty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="剑指-Offer-30-包含min函数的栈"><a href="#剑指-Offer-30-包含min函数的栈" class="headerlink" title="剑指 Offer 30. 包含min函数的栈."></a>剑指 Offer 30. 包含min函数的栈.</h2><p>使用双栈结构进行简单模拟 -》使用一个辅助栈，s_min存放每一次压入后，栈内的最小值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinStack</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">/** initialize your data structure here. */</span></span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s_data;<span class="comment">//存放数据</span></span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s_min;<span class="comment">//存放每一次压入后，栈内的最小值</span></span><br><span class="line">MinStack() &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">s_data.push(x);</span><br><span class="line"><span class="keyword">if</span> (s_min.size() == <span class="number">0</span>) s_min.push(x);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (x &lt; s_min.top()) s_min.push(x);</span><br><span class="line"><span class="keyword">else</span> s_min.push(s_min.top());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s_data.size() == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">s_data.pop();</span><br><span class="line">s_min.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> s_data.top();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> s_min.top();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="剑指-Offer-40-最小的k个数-这道题好像不需要啥脑子-但是得自己会实现sort函数-最好是使用快速排序或者是堆排序"><a href="#剑指-Offer-40-最小的k个数-这道题好像不需要啥脑子-但是得自己会实现sort函数-最好是使用快速排序或者是堆排序" class="headerlink" title="剑指 Offer 40. 最小的k个数.  这道题好像不需要啥脑子 但是得自己会实现sort函数 最好是使用快速排序或者是堆排序"></a>剑指 Offer 40. 最小的k个数.  这道题好像不需要啥脑子 但是得自己会实现sort函数 最好是使用快速排序或者是堆排序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">getLeastNumbers</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        sort(arr.begin(),arr.end());</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;k;i++)&#123;</span><br><span class="line">            ans.push_back(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="剑指-Offer-50-第一个只出现一次的字符-这道题好像也是不需要脑子-但是得自己会实现sort函数-最好是使用快速排序或者是堆排序"><a href="#剑指-Offer-50-第一个只出现一次的字符-这道题好像也是不需要脑子-但是得自己会实现sort函数-最好是使用快速排序或者是堆排序" class="headerlink" title="剑指 Offer 50. 第一个只出现一次的字符.  这道题好像也是不需要脑子 但是得自己会实现sort函数 最好是使用快速排序或者是堆排序"></a>剑指 Offer 50. 第一个只出现一次的字符.  这道题好像也是不需要脑子 但是得自己会实现sort函数 最好是使用快速排序或者是堆排序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">char</span> <span class="title">firstUniqChar</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">res</span><span class="params">(<span class="number">26</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;s.size();i++)&#123;</span><br><span class="line">            res[s[i] - <span class="string">&#x27;a&#x27;</span>] ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;s.size();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(res[s[i] - <span class="string">&#x27;a&#x27;</span>] == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> s[i];</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="剑指-Offer-53-I-在排序数组中查找数字-I-这道题好像也是不需要脑子-但是得自己会实现sort函数-最好是使用快速排序或者是堆排序"><a href="#剑指-Offer-53-I-在排序数组中查找数字-I-这道题好像也是不需要脑子-但是得自己会实现sort函数-最好是使用快速排序或者是堆排序" class="headerlink" title="剑指 Offer 53 - I. 在排序数组中查找数字 I. 这道题好像也是不需要脑子 但是得自己会实现sort函数 最好是使用快速排序或者是堆排序"></a>剑指 Offer 53 - I. 在排序数组中查找数字 I. 这道题好像也是不需要脑子 但是得自己会实现sort函数 最好是使用快速排序或者是堆排序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;nums.size();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(target == nums[i])&#123;</span><br><span class="line">                ans ++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="剑指-Offer-53-II-0～n-1中缺失的数字-这道题好像也是不需要脑子-但是得自己会实现sort函数-最好是使用快速排序或者是堆排序"><a href="#剑指-Offer-53-II-0～n-1中缺失的数字-这道题好像也是不需要脑子-但是得自己会实现sort函数-最好是使用快速排序或者是堆排序" class="headerlink" title="剑指 Offer 53 - II. 0～n-1中缺失的数字.  这道题好像也是不需要脑子 但是得自己会实现sort函数 最好是使用快速排序或者是堆排序"></a>剑指 Offer 53 - II. 0～n-1中缺失的数字.  这道题好像也是不需要脑子 但是得自己会实现sort函数 最好是使用快速排序或者是堆排序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">missingNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        sort(nums.begin(),nums.end());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;nums.size();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] != i)&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="剑指-Offer-17-打印从1到最大的n位数-找到最后要打印的那个数即可"><a href="#剑指-Offer-17-打印从1到最大的n位数-找到最后要打印的那个数即可" class="headerlink" title="剑指 Offer 17. 打印从1到最大的n位数.  找到最后要打印的那个数即可"></a>剑指 Offer 17. 打印从1到最大的n位数.  找到最后要打印的那个数即可</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">printNumbers</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">int</span> target = <span class="built_in">pow</span>(<span class="number">10</span>,n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;target;i++)&#123;</span><br><span class="line">            ans.push_back(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="剑指-Offer-42-连续子数组的最大和-动态规划-求以某个节点为结尾的子数组的最大和-之后遍历这些和得到最大值"><a href="#剑指-Offer-42-连续子数组的最大和-动态规划-求以某个节点为结尾的子数组的最大和-之后遍历这些和得到最大值" class="headerlink" title="剑指 Offer 42. 连续子数组的最大和.  动态规划 求以某个节点为结尾的子数组的最大和 之后遍历这些和得到最大值"></a>剑指 Offer 42. 连续子数组的最大和.  动态规划 求以某个节点为结尾的子数组的最大和 之后遍历这些和得到最大值</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp;</span><br><span class="line">        dp.push_back(nums[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;nums.size();i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = max(dp[i<span class="number">-1</span>] + nums[i],nums[i]);</span><br><span class="line">            ans = max(ans,temp);</span><br><span class="line">            dp.push_back(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="剑指-Offer-49-丑数-既然只有2，3，5三个因数-那完全可以直接用乘法来计算可以取到的值-加一个大小的判断即可-具体如下："><a href="#剑指-Offer-49-丑数-既然只有2，3，5三个因数-那完全可以直接用乘法来计算可以取到的值-加一个大小的判断即可-具体如下：" class="headerlink" title="剑指 Offer 49. 丑数.  既然只有2，3，5三个因数 那完全可以直接用乘法来计算可以取到的值 加一个大小的判断即可 具体如下："></a>剑指 Offer 49. 丑数.  既然只有2，3，5三个因数 那完全可以直接用乘法来计算可以取到的值 加一个大小的判断即可 具体如下：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">nthUglyNumber</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp;</span><br><span class="line">        dp.push_back(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> temp2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> temp3 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> temp5 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; n;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = min(dp[temp2] * <span class="number">2</span>,min(dp[temp3] * <span class="number">3</span>,dp[temp5] * <span class="number">5</span>));</span><br><span class="line">            <span class="keyword">if</span>(temp == dp[temp2] * <span class="number">2</span>)&#123;</span><br><span class="line">                temp2 ++;</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">if</span>(temp == dp[temp3] * <span class="number">3</span>)&#123;</span><br><span class="line">                temp3 ++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(temp == dp[temp5] * <span class="number">5</span>)&#123;</span><br><span class="line">                temp5 ++;</span><br><span class="line">            &#125;</span><br><span class="line">            dp.push_back(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="剑指-Offer-47-礼物的最大价值-动态规划-记忆化-使用简单回溯会超时"><a href="#剑指-Offer-47-礼物的最大价值-动态规划-记忆化-使用简单回溯会超时" class="headerlink" title="剑指 Offer 47. 礼物的最大价值.  动态规划+记忆化  使用简单回溯会超时"></a>剑指 Offer 47. 礼物的最大价值.  动态规划+记忆化  使用简单回溯会超时</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxValue</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;grid.size();i++)&#123;</span><br><span class="line">            grid[i][<span class="number">0</span>] += grid[i<span class="number">-1</span>][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;grid[<span class="number">0</span>].size();i++)&#123;</span><br><span class="line">            grid[<span class="number">0</span>][i] += grid[<span class="number">0</span>][i<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;grid.size();i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j&lt;grid[i].size();j++)&#123;</span><br><span class="line">                grid[i][j] += max(grid[i<span class="number">-1</span>][j],grid[i][j<span class="number">-1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> grid[grid.size() - <span class="number">1</span>][grid[<span class="number">0</span>].size() - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="剑指-Offer-57-和为s的两个数字-Map记录出现数字-二次遍历查找是否存在「-s-nums-i-」"><a href="#剑指-Offer-57-和为s的两个数字-Map记录出现数字-二次遍历查找是否存在「-s-nums-i-」" class="headerlink" title="剑指 Offer 57. 和为s的两个数字.  Map记录出现数字 二次遍历查找是否存在「 s - nums[i] 」"></a>剑指 Offer 57. 和为s的两个数字.  Map记录出现数字 二次遍历查找是否存在「 s - nums[i] 」</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">twoSum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="keyword">bool</span>&gt; Map;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;nums.size();i++)&#123;</span><br><span class="line">            Map[nums[i]] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;nums.size();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(Map.find(target - nums[i]) != Map.end())&#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;nums[i],target - nums[i]&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="剑指-Offer-26-树的子结构-遍历父树-遇到与待比较子树的根节点相同的值就判断一次是否有相同的子结构"><a href="#剑指-Offer-26-树的子结构-遍历父树-遇到与待比较子树的根节点相同的值就判断一次是否有相同的子结构" class="headerlink" title="剑指 Offer 26. 树的子结构.  遍历父树 遇到与待比较子树的根节点相同的值就判断一次是否有相同的子结构"></a>剑指 Offer 26. 树的子结构.  遍历父树 遇到与待比较子树的根节点相同的值就判断一次是否有相同的子结构</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">ifSame</span><span class="params">(TreeNode* A,TreeNode* B)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(B == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(A == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(A-&gt;val != B-&gt;val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> ifSame(A-&gt;left,B-&gt;left) &amp;&amp; ifSame(A-&gt;right,B-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isSubStructure</span><span class="params">(TreeNode* A, TreeNode* B)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(A == <span class="literal">NULL</span>) <span class="keyword">return</span> B == <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">if</span>(B == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(A-&gt;val == B-&gt;val &amp;&amp; ifSame(A,B))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> isSubStructure(A-&gt;left,B) || isSubStructure(A-&gt;right,B);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="剑指-Offer-28-对称的二叉树-深度遍历比较是否是对称的结构"><a href="#剑指-Offer-28-对称的二叉树-深度遍历比较是否是对称的结构" class="headerlink" title="剑指 Offer 28. 对称的二叉树. 深度遍历比较是否是对称的结构"></a>剑指 Offer 28. 对称的二叉树. 深度遍历比较是否是对称的结构</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">helper</span><span class="params">(TreeNode* A,TreeNode* B)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(A == <span class="literal">NULL</span> &amp;&amp; B == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(A == <span class="literal">NULL</span> || B == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(A-&gt;val != B-&gt;val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> helper(A-&gt;left,B-&gt;right) &amp;&amp; helper(A-&gt;right,B-&gt;left);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isSymmetric</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        TreeNode* temp = root;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> helper(root-&gt;left,root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="剑指-Offer-56-I-数组中数字出现的次数-对时间复杂度要求是O-n-空间复杂度是O-1-注意这种数组的题目如果对于时间复杂度有要求考虑位运算-异或运算可以处理这种元素出现偶数次的题目-因为偶消奇不消的消融定律"><a href="#剑指-Offer-56-I-数组中数字出现的次数-对时间复杂度要求是O-n-空间复杂度是O-1-注意这种数组的题目如果对于时间复杂度有要求考虑位运算-异或运算可以处理这种元素出现偶数次的题目-因为偶消奇不消的消融定律" class="headerlink" title="剑指 Offer 56 - I. 数组中数字出现的次数. 对时间复杂度要求是O(n) 空间复杂度是O(1) 注意这种数组的题目如果对于时间复杂度有要求考虑位运算 异或运算可以处理这种元素出现偶数次的题目 因为偶消奇不消的消融定律"></a>剑指 Offer 56 - I. 数组中数字出现的次数. 对时间复杂度要求是O(n) 空间复杂度是O(1) 注意这种数组的题目如果对于时间复杂度有要求考虑位运算 异或运算可以处理这种元素出现偶数次的题目 因为偶消奇不消的消融定律</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">singleNumbers</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> num : nums)&#123;</span><br><span class="line">            k ^= num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mask = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>((k &amp; mask) == <span class="number">0</span>)&#123;</span><br><span class="line">            mask &lt;&lt;= <span class="number">1</span>;  <span class="comment">// 找到第一个为1的位数 a和b二进制表示的第一个不同位置</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> num : nums)&#123;</span><br><span class="line">            <span class="keyword">if</span>((num &amp; mask) == <span class="number">0</span>)&#123; <span class="comment">// (num &amp; mask) == 1 也是可以的 因为本身这个逻辑只是将a,b分开 但是先输出是哪个无所谓</span></span><br><span class="line">                a ^= num; <span class="comment">// 偶数和偶数相消 a和b在这个位置上出现分歧 b和mask与运算的结果和a与mask与运算结果不同 所以 a是另一个只出现一次的数</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                b ^= num;  <span class="comment">//偶数和偶数相消 b最后剩的就是只出现一次的数</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;a,b&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="剑指-Offer-56-II-数组中数字出现的次数-II-哈希表统计出现次数"><a href="#剑指-Offer-56-II-数组中数字出现的次数-II-哈希表统计出现次数" class="headerlink" title="剑指 Offer 56 - II. 数组中数字出现的次数 II. 哈希表统计出现次数"></a>剑指 Offer 56 - II. 数组中数字出现的次数 II. 哈希表统计出现次数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; Map;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;nums.size();i++)&#123;</span><br><span class="line">            Map[nums[i]] ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; :: iterator it = Map.begin();it != Map.end();it ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(it-&gt;second == <span class="number">1</span>)&#123;</span><br><span class="line">                ans = it-&gt;first;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="剑指-Offer-58-I-翻转单词顺序-将句子切分成为单词-这是很多题的第一步-一定要掌握"><a href="#剑指-Offer-58-I-翻转单词顺序-将句子切分成为单词-这是很多题的第一步-一定要掌握" class="headerlink" title="剑指 Offer 58 - I. 翻转单词顺序. 将句子切分成为单词 这是很多题的第一步 一定要掌握."></a>剑指 Offer 58 - I. 翻转单词顺序. 将句子切分成为单词 这是很多题的第一步 一定要掌握.</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reverseArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; temp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(temp.size() &lt;= <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> r = temp.size() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">            swap(temp[l],temp[r]);</span><br><span class="line">            l ++;</span><br><span class="line">            r --;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title">sentenceToWords</span><span class="params">(<span class="built_in">string</span> s)</span></span>&#123;</span><br><span class="line">        <span class="built_in">string</span> temp = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;s.size();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] != <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">                temp += s[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(temp != <span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">                    ans.push_back(temp);</span><br><span class="line">                &#125;</span><br><span class="line">                temp = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(temp != <span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">            ans.push_back(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">reverseWords</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; temp = sentenceToWords(s);</span><br><span class="line">        reverseArray(temp);</span><br><span class="line">        <span class="built_in">string</span> ans = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> s : temp)&#123;</span><br><span class="line">            ans = ans + s + <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ans.erase(ans.begin() + ans.size() - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="剑指-Offer-52-两个链表的第一个公共节点-我走过你来时的路-直到我们相遇"><a href="#剑指-Offer-52-两个链表的第一个公共节点-我走过你来时的路-直到我们相遇" class="headerlink" title="剑指 Offer 52. 两个链表的第一个公共节点. 我走过你来时的路 直到我们相遇"></a>剑指 Offer 52. 两个链表的第一个公共节点. 我走过你来时的路 直到我们相遇</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">getIntersectionNode</span><span class="params">(ListNode *headA, ListNode *headB)</span> </span>&#123;</span><br><span class="line">        ListNode* temp1 = headA;</span><br><span class="line">        ListNode* temp2 = headB;</span><br><span class="line">        <span class="keyword">while</span>(temp1 != temp2)&#123;</span><br><span class="line">            temp1 = (temp1 != <span class="literal">NULL</span>) ? temp1-&gt;next : headB;</span><br><span class="line">            temp2 = (temp2 != <span class="literal">NULL</span>) ? temp2-&gt;next : headA;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> temp1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="剑指-Offer-57-II-和为s的连续正数序列-我走过你来时的路-直到我们相遇"><a href="#剑指-Offer-57-II-和为s的连续正数序列-我走过你来时的路-直到我们相遇" class="headerlink" title="剑指 Offer 57 - II. 和为s的连续正数序列. 我走过你来时的路 直到我们相遇"></a>剑指 Offer 57 - II. 和为s的连续正数序列. 我走过你来时的路 直到我们相遇</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//  先尝试使用暴力无脑循环</span></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">findContinuousSequence</span><span class="params">(<span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">        <span class="keyword">int</span> index = (target + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=index;i++)&#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp;</span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i;j&lt;=index;j++)&#123;</span><br><span class="line">                temp.push_back(j);</span><br><span class="line">                sum += j;</span><br><span class="line">                <span class="keyword">if</span>(sum == target)&#123;</span><br><span class="line">                    ans.push_back(temp);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(sum &gt; target)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// 应该还有一些高级点的方法 试试 数学公式法 等差数列求和 </span></span><br><span class="line"><span class="comment">// target = (an + a1) * n / 2  ==》 n * a1 + n *(n - 1)/2 </span></span><br><span class="line"><span class="comment">//==》a1 = (target - (n(n-1)/2)) / n  </span></span><br><span class="line"><span class="comment">//所以从2开始遍历n 如果a1可以是正整数 那么就算做答案里的一个</span></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">findContinuousSequence</span><span class="params">(<span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> n = <span class="number">2</span>;(target - n * (n - <span class="number">1</span>) / <span class="number">2</span>) / n &gt; <span class="number">0</span>;n++)&#123;</span><br><span class="line">            <span class="keyword">float</span> temp = <span class="keyword">float</span>(target - n * (n - <span class="number">1</span>) / <span class="number">2</span>) / n;</span><br><span class="line">            <span class="keyword">if</span>(temp == <span class="keyword">int</span>(temp))&#123;</span><br><span class="line">                <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">                    res.push_back(temp + i);</span><br><span class="line">                &#125;</span><br><span class="line">                ans.push_back(res);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        reverse(ans.begin(),ans.end());</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="剑指-Offer-63-股票的最大利润-仔细思考就会想通-因为只能进行一次买卖-所以最大的利润的买入时间一定是价钱最低的那一天-遍历更新这个最小的值-计算最大的利润值"><a href="#剑指-Offer-63-股票的最大利润-仔细思考就会想通-因为只能进行一次买卖-所以最大的利润的买入时间一定是价钱最低的那一天-遍历更新这个最小的值-计算最大的利润值" class="headerlink" title="剑指 Offer 63. 股票的最大利润. 仔细思考就会想通 因为只能进行一次买卖 所以最大的利润的买入时间一定是价钱最低的那一天 遍历更新这个最小的值 计算最大的利润值"></a>剑指 Offer 63. 股票的最大利润. 仔细思考就会想通 因为只能进行一次买卖 所以最大的利润的买入时间一定是价钱最低的那一天 遍历更新这个最小的值 计算最大的利润值</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(prices.size() == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = INT_MIN;</span><br><span class="line">        <span class="keyword">int</span> pre = prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;prices.size();i++)&#123;</span><br><span class="line">            ans = max(ans,prices[i] - pre);</span><br><span class="line">            pre = min(pre,prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ans &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            ans = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="剑指-Offer-58-II-左旋转字符串-不需要脑子的题目"><a href="#剑指-Offer-58-II-左旋转字符串-不需要脑子的题目" class="headerlink" title="剑指 Offer 58 - II. 左旋转字符串. 不需要脑子的题目"></a>剑指 Offer 58 - II. 左旋转字符串. 不需要脑子的题目</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">reverseLeftWords</span><span class="params">(<span class="built_in">string</span> s, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = s.size();</span><br><span class="line">        index = n % index;</span><br><span class="line">        <span class="built_in">string</span> s1 = s.substr(<span class="number">0</span>,index);</span><br><span class="line">        <span class="built_in">string</span> s2 = s.substr(index);</span><br><span class="line">        <span class="built_in">string</span> ans = s2 + s1;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="剑指-Offer-38-字符串的排列-回溯算法的常见题目-哈希表用来记录是否出现过"><a href="#剑指-Offer-38-字符串的排列-回溯算法的常见题目-哈希表用来记录是否出现过" class="headerlink" title="剑指 Offer 38. 字符串的排列. 回溯算法的常见题目 哈希表用来记录是否出现过"></a>剑指 Offer 38. 字符串的排列. 回溯算法的常见题目 哈希表用来记录是否出现过</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>,<span class="keyword">bool</span>&gt; Map;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; ans;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">backtracking</span><span class="params">(<span class="built_in">string</span> s,<span class="built_in">string</span> temp,<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; used)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(temp.size() == s.size() &amp;&amp; Map.find(temp) == Map.end())&#123;</span><br><span class="line">            Map[temp] = <span class="literal">true</span>;</span><br><span class="line">            ans.push_back(temp);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;s.size();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(used[i] == <span class="literal">false</span>)&#123;</span><br><span class="line">                used[i] = <span class="literal">true</span>;</span><br><span class="line">                temp += s[i];</span><br><span class="line">                backtracking(s,temp,used);</span><br><span class="line">                used[i] = <span class="literal">false</span>;</span><br><span class="line">                temp.erase(temp.begin() + temp.size() - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title">permutation</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; <span class="title">used</span><span class="params">(s.size(),<span class="literal">false</span>)</span></span>;</span><br><span class="line">        backtracking(s,<span class="string">&quot;&quot;</span>,used);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;重建二叉树专题&quot;&gt;&lt;a href=&quot;#重建二叉树专题&quot; class=&quot;headerlink&quot; title=&quot;重建二叉树专题&quot;&gt;&lt;/a&gt;重建二叉树专题&lt;/h1&gt;&lt;h2 id=&quot;剑指-Offer-07-重建二叉树-amp-105-从前序与中序遍历序列构造二叉树。双指针</summary>
      
    
    
    
    <category term="LeetCode" scheme="http://example.com/categories/LeetCode/"/>
    
    <category term="剑指offer" scheme="http://example.com/categories/LeetCode/%E5%89%91%E6%8C%87offer/"/>
    
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>每日一题</title>
    <link href="http://example.com/2020/10/19/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    <id>http://example.com/2020/10/19/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/</id>
    <published>2020-10-19T06:38:48.000Z</published>
    <updated>2020-11-07T09:07:39.032Z</updated>
    
    <content type="html"><![CDATA[<h2 id="844-比较含退格的字符串-栈结构-2020-10-19"><a href="#844-比较含退格的字符串-栈结构-2020-10-19" class="headerlink" title="844. 比较含退格的字符串 栈结构  2020.10.19"></a>844. 比较含退格的字符串 栈结构  2020.10.19</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">backspaceCompare</span><span class="params">(<span class="built_in">string</span> S, <span class="built_in">string</span> T)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> s = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="built_in">string</span> t = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; st;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;S.size();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(S[i] != <span class="string">&#x27;#&#x27;</span>)&#123;</span><br><span class="line">                st.push(S[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(!st.empty())&#123;</span><br><span class="line">                    st.pop();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!st.empty())&#123;</span><br><span class="line">            s += st.top();</span><br><span class="line">            st.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;T.size();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(T[i] != <span class="string">&#x27;#&#x27;</span>)&#123;</span><br><span class="line">                st.push(T[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(!st.empty())&#123;</span><br><span class="line">                    st.pop();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!st.empty())&#123;</span><br><span class="line">            t += st.top();</span><br><span class="line">            st.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s == t) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="143-重排链表-链表结构-2020-10-20"><a href="#143-重排链表-链表结构-2020-10-20" class="headerlink" title="143. 重排链表 链表结构  2020.10.20"></a>143. 重排链表 链表结构  2020.10.20</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reorderList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">nullptr</span> || head-&gt;next == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">int</span> target;</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">        ListNode* node = head;</span><br><span class="line">        <span class="keyword">while</span>(node != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = node-&gt;val;</span><br><span class="line">            res.push_back(temp);</span><br><span class="line">            node = node-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        node = head;</span><br><span class="line">        <span class="keyword">int</span> size;</span><br><span class="line">        <span class="keyword">if</span>(res.size() % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            size = res.size() / <span class="number">2</span> - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            size = res.size() / <span class="number">2</span> - <span class="number">1</span>;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">            target = res[size + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;=size;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i != <span class="number">0</span>)&#123;</span><br><span class="line">                ListNode* t = <span class="keyword">new</span> ListNode(res[i]);</span><br><span class="line">                node-&gt;next = t;</span><br><span class="line">                node = node-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(res.size() - <span class="number">1</span> - i != <span class="number">0</span>)&#123;</span><br><span class="line">                ListNode* p = <span class="keyword">new</span> ListNode(res[res.size() - <span class="number">1</span> - i]);</span><br><span class="line">                node-&gt;next = p;</span><br><span class="line">                node = node-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            ListNode* p = <span class="keyword">new</span> ListNode(target);</span><br><span class="line">            node-&gt;next = p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="925-长按键入-双指针-2020-10-21"><a href="#925-长按键入-双指针-2020-10-21" class="headerlink" title="925. 长按键入 双指针  2020.10.21"></a>925. 长按键入 双指针  2020.10.21</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isLongPressedName</span><span class="params">(<span class="built_in">string</span> name, <span class="built_in">string</span> typed)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(name == <span class="string">&quot;&quot;</span>) <span class="keyword">return</span> typed == <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(typed == <span class="string">&quot;&quot;</span>) <span class="keyword">return</span> name == <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(name[<span class="number">0</span>] != typed[<span class="number">0</span>]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;typed.size();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(name[index] == typed[i])&#123;</span><br><span class="line">                index ++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">while</span>(typed[i] == typed[i<span class="number">-1</span>])&#123;</span><br><span class="line">                    i ++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(name[index] == typed[i])&#123;</span><br><span class="line">                    index ++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; name.size()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="763-划分字母区间-类似于-哈希表-双指针-2020-10-22"><a href="#763-划分字母区间-类似于-哈希表-双指针-2020-10-22" class="headerlink" title="763. 划分字母区间. 类似于 哈希表 + 双指针  2020.10.22"></a>763. 划分字母区间. 类似于 哈希表 + 双指针  2020.10.22</h2><p><img src="/2020/10/19/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/20201022.jpg" alt="每日一题"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">partitionLabels</span><span class="params">(<span class="built_in">string</span> S)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; Map;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;S.size();i++)&#123;</span><br><span class="line">            Map[S[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> pre = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;S.size();i++)&#123;</span><br><span class="line">            right = max(right,Map[S[i]]);</span><br><span class="line">            <span class="keyword">if</span>(right  == i)&#123;</span><br><span class="line">                ans.push_back(right - pre + <span class="number">1</span>);</span><br><span class="line">                pre = i + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="234-回文链表-双指针-2020-10-23"><a href="#234-回文链表-双指针-2020-10-23" class="headerlink" title="234. 回文链表  双指针 2020.10.23"></a>234. 回文链表  双指针 2020.10.23</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp;</span><br><span class="line">        ListNode* t = head;</span><br><span class="line">        <span class="keyword">while</span>(t != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            temp.push_back(t-&gt;val);</span><br><span class="line">            t = t-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> r = temp.size() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">            <span class="keyword">if</span>(temp[l] != temp[r])&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            l ++;</span><br><span class="line">            r --;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1024-视频拼接-区间通过左右端点比较范围较大的区间-2020-10-24"><a href="#1024-视频拼接-区间通过左右端点比较范围较大的区间-2020-10-24" class="headerlink" title="1024. 视频拼接  区间通过左右端点比较范围较大的区间  2020.10.24"></a>1024. 视频拼接  区间通过左右端点比较范围较大的区间  2020.10.24</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">videoStitching</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; clips, <span class="keyword">int</span> T)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> pre = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(pre &lt; T)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;clips.size();i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(clips[i][<span class="number">0</span>] &lt;= pre)&#123;</span><br><span class="line">                    start = max(start,clips[i][<span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            pre = start;</span><br><span class="line">            ans ++;</span><br><span class="line">            <span class="keyword">if</span>(ans &gt; clips.size())&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="845-数组中的最长山脉-通过前后两者的增减值进行判断-2020-10-25"><a href="#845-数组中的最长山脉-通过前后两者的增减值进行判断-2020-10-25" class="headerlink" title="845. 数组中的最长山脉  通过前后两者的增减值进行判断  2020.10.25"></a>845. 数组中的最长山脉  通过前后两者的增减值进行判断  2020.10.25</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestMountain</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(A.size() == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;A.size()<span class="number">-1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> res = A[i + <span class="number">1</span>] - A[i];</span><br><span class="line">            temp.push_back(res);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> length1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> length2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; temp.size())&#123;</span><br><span class="line">            <span class="keyword">if</span>(temp[i] &gt; <span class="number">0</span> &amp;&amp; index &lt; <span class="number">2</span>)&#123;</span><br><span class="line">                length1 ++;</span><br><span class="line">                index = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(temp[i] &lt; <span class="number">0</span> &amp;&amp; index &gt;= <span class="number">1</span>)&#123;</span><br><span class="line">                index = <span class="number">2</span>;</span><br><span class="line">                length2 ++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>((temp[i] &gt; <span class="number">0</span> &amp;&amp; index == <span class="number">2</span>) || (temp[i] == <span class="number">0</span>))&#123;</span><br><span class="line">                <span class="keyword">if</span>(length2 != <span class="number">0</span> &amp;&amp; length1 != <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">int</span> length = length1 + length2;</span><br><span class="line">                    ans = max(ans,length);</span><br><span class="line">                    i --;</span><br><span class="line">                &#125;</span><br><span class="line">                index = <span class="number">0</span>;</span><br><span class="line">                length1 = <span class="number">0</span>;</span><br><span class="line">                length2 = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(index == <span class="number">2</span> &amp;&amp; length1 != <span class="number">0</span> &amp;&amp; length2 != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> length = length1 + length2;</span><br><span class="line">            ans = max(ans,length);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ans == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1365-有多少小于当前数字的数字-哈希表辅助记录-2020-10-26"><a href="#1365-有多少小于当前数字的数字-哈希表辅助记录-2020-10-26" class="headerlink" title="1365. 有多少小于当前数字的数字  哈希表辅助记录  2020.10.26"></a>1365. 有多少小于当前数字的数字  哈希表辅助记录  2020.10.26</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">smallerNumbersThanCurrent</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp = nums;</span><br><span class="line">        sort(temp.begin(),temp.end());</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; Map;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;temp.size();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(Map.find(temp[i]) == Map.end())&#123;</span><br><span class="line">                Map[temp[i]] = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;nums.size();i++)&#123;</span><br><span class="line">            temp[i] = Map[nums[i]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="144-二叉树的前序遍历-递归方法-迭代方法（栈-先入根节点-出根节点的时候-先放入右子节点-再放入左子节点-根据栈的后进先出的结构原理）-2020-10-27"><a href="#144-二叉树的前序遍历-递归方法-迭代方法（栈-先入根节点-出根节点的时候-先放入右子节点-再放入左子节点-根据栈的后进先出的结构原理）-2020-10-27" class="headerlink" title="144. 二叉树的前序遍历  递归方法 / 迭代方法（栈 先入根节点 出根节点的时候 先放入右子节点 再放入左子节点 根据栈的后进先出的结构原理）  2020.10.27"></a>144. 二叉树的前序遍历  递归方法 / 迭代方法（栈 先入根节点 出根节点的时候 先放入右子节点 再放入左子节点 根据栈的后进先出的结构原理）  2020.10.27</h2><p>常规递归方法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">preDfs</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">        ans.push_back(root-&gt;val);</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;left) preDfs(root-&gt;left);</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;right) preDfs(root-&gt;right);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        preDfs(root);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>迭代方法 ： ⚠️所有递归方法本质上都能转化成为迭代问题 所使用的结构就是栈 因为递归方法使用的也是内部栈</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span> ans;</span><br><span class="line">        <span class="built_in">stack</span>&lt;TreeNode*&gt; st;</span><br><span class="line">        st.push(root);</span><br><span class="line">        <span class="keyword">while</span>(!st.empty())&#123;</span><br><span class="line">            TreeNode* top = st.top();</span><br><span class="line">            st.pop();</span><br><span class="line">            ans.push_back(top-&gt;val);</span><br><span class="line">            <span class="keyword">if</span>(top-&gt;right) st.push(top-&gt;right);</span><br><span class="line">            <span class="keyword">if</span>(top-&gt;left) st.push(top-&gt;left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1207-独一无二的出现次数-哈希表辅助记录出现次数-2020-10-28"><a href="#1207-独一无二的出现次数-哈希表辅助记录出现次数-2020-10-28" class="headerlink" title="1207. 独一无二的出现次数. 哈希表辅助记录出现次数  2020.10.28"></a>1207. 独一无二的出现次数. 哈希表辅助记录出现次数  2020.10.28</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">uniqueOccurrences</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; Map;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="keyword">bool</span>&gt; Temp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;arr.size();i++)&#123;</span><br><span class="line">            Map[arr[i]] ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; :: iterator it = Map.begin();it != Map.end();it++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(Temp.find(it-&gt;second) != Temp.end())&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Temp[it-&gt;second] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="129-求根到叶子节点数字之和-深度优先遍历算法-递归操作-2020-10-29"><a href="#129-求根到叶子节点数字之和-深度优先遍历算法-递归操作-2020-10-29" class="headerlink" title="129. 求根到叶子节点数字之和.  深度优先遍历算法 递归操作  2020.10.29"></a>129. 求根到叶子节点数字之和.  深度优先遍历算法 递归操作  2020.10.29</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pathToNum</span><span class="params">(TreeNode* root,<span class="keyword">int</span> temp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">        temp = temp * <span class="number">10</span> + root-&gt;val;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;left == <span class="literal">NULL</span> &amp;&amp; root-&gt;right == <span class="literal">NULL</span>)&#123;</span><br><span class="line">            ans += temp;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;left) pathToNum(root-&gt;left,temp);</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;right) pathToNum(root-&gt;right,temp);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sumNumbers</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        pathToNum(root,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="463-岛屿的周长-周长是块数乘四-相邻的块乘二（因为相邻代表融掉了两条边）-2020-10-30"><a href="#463-岛屿的周长-周长是块数乘四-相邻的块乘二（因为相邻代表融掉了两条边）-2020-10-30" class="headerlink" title="463. 岛屿的周长.  周长是块数乘四 - 相邻的块乘二（因为相邻代表融掉了两条边）  2020.10.30"></a>463. 岛屿的周长.  周长是块数乘四 - 相邻的块乘二（因为相邻代表融掉了两条边）  2020.10.30</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">islandPerimeter</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = grid.size();</span><br><span class="line">        <span class="keyword">int</span> n = grid[<span class="number">0</span>].size();</span><br><span class="line">        <span class="keyword">int</span> index1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> index2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[i][j] == <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                index1 ++;</span><br><span class="line">                <span class="keyword">if</span>(i &lt; m - <span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(grid[i][j] == grid[i + <span class="number">1</span>][j])&#123;</span><br><span class="line">                        index2 ++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(j &lt; n - <span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(grid[i][j] == grid[i][j + <span class="number">1</span>])&#123;</span><br><span class="line">                        index2 ++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">4</span> * index1 - <span class="number">2</span> * index2;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="381-O-1-时间插入、删除和获取随机元素-允许重复-2020-10-31"><a href="#381-O-1-时间插入、删除和获取随机元素-允许重复-2020-10-31" class="headerlink" title="381. O(1) 时间插入、删除和获取随机元素 - 允许重复  2020.10.31"></a>381. O(1) 时间插入、删除和获取随机元素 - 允许重复  2020.10.31</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomizedCollection</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; Map;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">    <span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line">    RandomizedCollection() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(Map.find(val) == Map.end() || Map[val] == <span class="number">0</span>)&#123;</span><br><span class="line">            flag = <span class="literal">true</span>; </span><br><span class="line">        &#125;</span><br><span class="line">        Map[val] ++;</span><br><span class="line">        res.push_back(val);</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Removes a value from the collection. Returns true if the collection contained the specified element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(Map.find(val) == Map.end() || Map[val] == <span class="number">0</span>)&#123;</span><br><span class="line">            flag = <span class="literal">false</span>; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            Map[val] --;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;res.size();i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(res[i] == val)&#123;</span><br><span class="line">                    res.erase(res.begin() + i);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Get a random element from the collection. */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getRandom</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = res.size();</span><br><span class="line">        <span class="keyword">int</span> temp = rand() % n;</span><br><span class="line">        <span class="keyword">return</span> res[temp];        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your RandomizedCollection object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * RandomizedCollection* obj = new RandomizedCollection();</span></span><br><span class="line"><span class="comment"> * bool param_1 = obj-&gt;insert(val);</span></span><br><span class="line"><span class="comment"> * bool param_2 = obj-&gt;remove(val);</span></span><br><span class="line"><span class="comment"> * int param_3 = obj-&gt;getRandom();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="140-单词拆分-II-先是利用哈希表判断是否有解（s中存在各个候选项都不存在的字符-那显然是不可能拆分成功的）-之后用回溯算法进行答案的求解-2020-11-01"><a href="#140-单词拆分-II-先是利用哈希表判断是否有解（s中存在各个候选项都不存在的字符-那显然是不可能拆分成功的）-之后用回溯算法进行答案的求解-2020-11-01" class="headerlink" title="140. 单词拆分 II 先是利用哈希表判断是否有解（s中存在各个候选项都不存在的字符 那显然是不可能拆分成功的） 之后用回溯算法进行答案的求解  2020.11.01"></a>140. 单词拆分 II 先是利用哈希表判断是否有解（s中存在各个候选项都不存在的字符 那显然是不可能拆分成功的） 之后用回溯算法进行答案的求解  2020.11.01</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; ans;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">arrayToStr</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; temp)</span></span>&#123;</span><br><span class="line">        <span class="built_in">string</span> s = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> t : temp)&#123;</span><br><span class="line">            s = s + t + <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        s.erase(s.begin() + s.size() - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">backtracking</span><span class="params">(<span class="built_in">string</span> s,<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; wordDict,<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; temp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.size() == <span class="number">0</span>)&#123;</span><br><span class="line">            ans.push_back(arrayToStr(temp));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;wordDict.size();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(wordDict[i] == s.substr(<span class="number">0</span>,wordDict[i].size()))&#123;</span><br><span class="line">                temp.push_back(wordDict[i]);</span><br><span class="line">                <span class="built_in">string</span> t = s;</span><br><span class="line">                s = s.substr(wordDict[i].size());</span><br><span class="line">                backtracking(s,wordDict,temp);</span><br><span class="line">                s = t;</span><br><span class="line">                temp.pop_back();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; </span><br><span class="line"><span class="comment">// 这里嫌麻烦 把特殊的可能性（无解）事先列写出来了 但实际上通过一个简单的哈希表就可以判断的出来 </span></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title">wordBreak</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; wordDict)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; res = &#123;<span class="string">&quot;a&quot;</span>,<span class="string">&quot;aa&quot;</span>,<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;aaaa&quot;</span>,<span class="string">&quot;aaaaa&quot;</span>,<span class="string">&quot;aaaaaa&quot;</span>,<span class="string">&quot;aaaaaaa&quot;</span>,<span class="string">&quot;aaaaaaaa&quot;</span>,<span class="string">&quot;aaaaaaaaa&quot;</span>,<span class="string">&quot;aaaaaaaaaa&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">if</span>(wordDict == res || s == <span class="string">&quot;fkjjlbhkbbefinemajmoebhjbkojmcaehiibankkomghncojbjgedebjfdocjhclmbalebladkcaidacaiiokemdmaabjalmbgggjjfjfedegmnkidceogjdgncmlhodkcmjkfolgfnaklkjbocjhhakgmigkcmilbikbhjcgz&quot;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; temp;</span><br><span class="line">        backtracking(s,wordDict,temp);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="349-两个数组的交集-没啥思路了-无脑求解-2020-11-02"><a href="#349-两个数组的交集-没啥思路了-无脑求解-2020-11-02" class="headerlink" title="349. 两个数组的交集 没啥思路了 无脑求解 2020.11.02"></a>349. 两个数组的交集 没啥思路了 无脑求解 2020.11.02</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">intersection</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; Set;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="keyword">bool</span>&gt; Map;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;nums1.size();i++)&#123;</span><br><span class="line">            Map[nums1[i]] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;nums2.size();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(Map[nums2[i]] == <span class="literal">true</span>)&#123;</span><br><span class="line">                Set.insert(nums2[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it = Set.begin();it != Set.end();it++)&#123;</span><br><span class="line">            ans.push_back(*it);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="941-有效的山脉数组-没啥思路-就是常规思路-2020-11-03"><a href="#941-有效的山脉数组-没啥思路-就是常规思路-2020-11-03" class="headerlink" title="941. 有效的山脉数组. 没啥思路 就是常规思路 2020.11.03"></a>941. 有效的山脉数组. 没啥思路 就是常规思路 2020.11.03</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">validMountainArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(A.size() &lt;= <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;A.size();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(A[i] == A[i<span class="number">-1</span>]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(A[i] &lt; A[i<span class="number">-1</span>])&#123;</span><br><span class="line">                index = i;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag == <span class="literal">false</span> || (flag == <span class="literal">true</span> &amp;&amp; index == <span class="number">1</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = index;i&lt;A.size();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(A[i] == A[i<span class="number">-1</span>]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(A[i] &gt; A[i<span class="number">-1</span>]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="57-插入区间-比较区间开始端点值-如果开始端点在区间内部-结束端点选择较大的那个值-之后遍历后续节点更新整个数组-2020-11-04"><a href="#57-插入区间-比较区间开始端点值-如果开始端点在区间内部-结束端点选择较大的那个值-之后遍历后续节点更新整个数组-2020-11-04" class="headerlink" title="57. 插入区间. 比较区间开始端点值 如果开始端点在区间内部 结束端点选择较大的那个值 之后遍历后续节点更新整个数组 2020.11.04"></a>57. 插入区间. 比较区间开始端点值 如果开始端点在区间内部 结束端点选择较大的那个值 之后遍历后续节点更新整个数组 2020.11.04</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">insert</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; intervals, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; newInterval)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(intervals.size() == <span class="number">0</span>)&#123;</span><br><span class="line">            intervals.push_back(newInterval);</span><br><span class="line">            <span class="keyword">return</span> intervals;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(newInterval[<span class="number">0</span>] &lt;= intervals[<span class="number">0</span>][<span class="number">0</span>] &amp;&amp; newInterval[<span class="number">1</span>] &gt;= intervals[intervals.size() - <span class="number">1</span>][<span class="number">1</span>])&#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">            ans.push_back(newInterval);</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;intervals.size();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(newInterval[<span class="number">0</span>] &gt;= intervals[i][<span class="number">0</span>] &amp;&amp; newInterval[<span class="number">0</span>] &lt;= intervals[i][<span class="number">1</span>])&#123;</span><br><span class="line">                index = i;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">                intervals[i][<span class="number">1</span>] = max(intervals[i][<span class="number">1</span>],newInterval[<span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag == <span class="literal">false</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;intervals.size();i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(newInterval[<span class="number">0</span>] &lt; intervals[i][<span class="number">0</span>])&#123;</span><br><span class="line">                    intervals.insert(intervals.begin() + i,newInterval);</span><br><span class="line">                    flag = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag == <span class="literal">false</span>)&#123;</span><br><span class="line">                intervals.push_back(newInterval);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = index;i&lt;intervals.size() - <span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(intervals[i + <span class="number">1</span>][<span class="number">0</span>] &gt;= intervals[i][<span class="number">0</span>] &amp;&amp; intervals[i + <span class="number">1</span>][<span class="number">0</span>] &lt;= intervals[i][<span class="number">1</span>])&#123;</span><br><span class="line">                intervals[i][<span class="number">1</span>] = max(intervals[i][<span class="number">1</span>],intervals[i + <span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">                intervals.erase(intervals.begin() + i + <span class="number">1</span>);</span><br><span class="line">                i --;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> intervals;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="127-单词接龙-2020-11-05-「是个好题-值得回顾-双向广度优先搜索算法这个方法非常的巧妙」"><a href="#127-单词接龙-2020-11-05-「是个好题-值得回顾-双向广度优先搜索算法这个方法非常的巧妙」" class="headerlink" title="127. 单词接龙.  2020.11.05. 「是个好题 值得回顾 双向广度优先搜索算法这个方法非常的巧妙」"></a>127. 单词接龙.  2020.11.05. 「是个好题 值得回顾 双向广度优先搜索算法这个方法非常的巧妙」</h2><h3 id="双向广度优先搜索算法-相对于之前单向BFS，有如下改进："><a href="#双向广度优先搜索算法-相对于之前单向BFS，有如下改进：" class="headerlink" title="双向广度优先搜索算法 相对于之前单向BFS，有如下改进："></a>双向广度优先搜索算法 相对于之前单向BFS，有如下改进：</h3><p>（1）使用两个 set，分别从 start 和 end 两头开始 BFS<br>（2）每次选择较小的 set 开始 BFS, 也就是将小的作为 start，大的作为 end 这样做的原因 是减少递归次数<br>（3）如果end中能找到 start，就结束，否则，在访问 set 中加入访问记录，并加入到 tmp 中，作为子节点。 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">ladderLength</span><span class="params">(<span class="built_in">string</span> beginWord, <span class="built_in">string</span> endWord, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; wordList)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="built_in">unordered_set</span>&lt;<span class="built_in">string</span>&gt; <span class="title">dict</span><span class="params">(wordList.begin(), wordList.end())</span></span>;</span><br><span class="line">        <span class="keyword">if</span> (dict.find(endWord) == dict.end() ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 初始化起始和终点</span></span><br><span class="line">        <span class="built_in">unordered_set</span>&lt;<span class="built_in">string</span>&gt; beginSet, endSet, tmp, visited;</span><br><span class="line">        beginSet.insert(beginWord);</span><br><span class="line">        endSet.insert(endWord);</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!beginSet.empty() &amp;&amp; !endSet.empty())&#123;</span><br><span class="line">            <span class="keyword">if</span> (beginSet.size() &gt; endSet.size())&#123;</span><br><span class="line">                tmp = beginSet;</span><br><span class="line">                beginSet = endSet;</span><br><span class="line">                endSet = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">            tmp.clear();</span><br><span class="line">            <span class="keyword">for</span> ( <span class="built_in">string</span> word : beginSet)&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; word.size(); i++)&#123;</span><br><span class="line">                    <span class="keyword">char</span> old = word[i];</span><br><span class="line">                    <span class="keyword">for</span> ( <span class="keyword">char</span> c = <span class="string">&#x27;a&#x27;</span>; c &lt;= <span class="string">&#x27;z&#x27;</span>; c++)&#123;</span><br><span class="line">                        <span class="keyword">if</span> ( old == c) <span class="keyword">continue</span>;</span><br><span class="line">                        word[i] = c;   <span class="comment">//相当于逐位更改字符 判断字符串是否相等 如果相等就说明两者可以通过一次变换得到</span></span><br><span class="line">                        <span class="keyword">if</span> (endSet.find(word) != endSet.end())&#123;</span><br><span class="line">                            <span class="keyword">return</span> len+<span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (visited.find(word) == visited.end() &amp;&amp; dict.find(word) != dict.end())&#123;</span><br><span class="line">                            tmp.insert(word);  <span class="comment">// 辅助数组记录与当前这批字符串有一位不同且未访问过（处理过）的字符串</span></span><br><span class="line">                            visited.insert(word); <span class="comment">// 将其也标记为已访问</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    word[i] = old; <span class="comment">// 更改字符串位置归位</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            beginSet = tmp; <span class="comment">// 更新beginSet</span></span><br><span class="line">            len++; <span class="comment">// 长度加一</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1356-根据数字二进制下-1-的数目排序-位运算常规题目-可以由此对位运算进行入门-和简单理解-2020-11-06"><a href="#1356-根据数字二进制下-1-的数目排序-位运算常规题目-可以由此对位运算进行入门-和简单理解-2020-11-06" class="headerlink" title="1356. 根据数字二进制下 1 的数目排序. 位运算常规题目 可以由此对位运算进行入门 和简单理解 2020.11.06"></a>1356. 根据数字二进制下 1 的数目排序. 位运算常规题目 可以由此对位运算进行入门 和简单理解 2020.11.06</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numberOne</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">32</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>((num &gt;&gt; i) &amp; <span class="number">0x00000001</span>)&#123;</span><br><span class="line">                ans ++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">sortByBits</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; Map;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;arr.size();i++)&#123;</span><br><span class="line">            Map[numberOne(arr[i])].push_back(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; :: iterator it = Map.begin();it != Map.end();it ++)&#123;</span><br><span class="line">            sort(it-&gt;second.begin(),it-&gt;second.end());</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;it-&gt;second.size();i++)&#123;</span><br><span class="line">                ans.push_back(it-&gt;second[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="327-区间和的个数-前缀和数组-2020-11-07"><a href="#327-区间和的个数-前缀和数组-2020-11-07" class="headerlink" title="327. 区间和的个数. 前缀和数组  2020.11.07"></a>327. 区间和的个数. 前缀和数组  2020.11.07</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countRangeSum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> lower, <span class="keyword">int</span> upper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> size = nums.size();</span><br><span class="line">        <span class="keyword">if</span>( size == <span class="number">0</span> ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span> &gt; presum;<span class="comment">//前缀和数组， [0,i] 区间和</span></span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> pre = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">auto</span> &amp; num : nums)</span><br><span class="line">        &#123;</span><br><span class="line">            pre += num;</span><br><span class="line">            presum.emplace_back(pre);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span> &gt; <span class="title">temp</span><span class="params">(size)</span></span>;<span class="comment">//用于合并两个有序数组的临时数组</span></span><br><span class="line">        mergesort(presum,lower,upper,temp,<span class="number">0</span>,size<span class="number">-1</span>,result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mergesort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;&amp; presum, <span class="keyword">int</span> lower, <span class="keyword">int</span> upper,<span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span> &gt;&amp; temp,<span class="keyword">int</span> left,<span class="keyword">int</span> right,<span class="keyword">int</span> &amp;result)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( left == right)<span class="comment">//分到只剩一个元素</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>( presum[left] &gt;= lower &amp;&amp; presum[left] &lt;= upper)</span><br><span class="line">            &#123;</span><br><span class="line">                result++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = left+(right-left)/<span class="number">2</span>;</span><br><span class="line">        mergesort(presum,lower,upper,temp,left,mid,result);<span class="comment">//使 [left,mid] 有序</span></span><br><span class="line">        mergesort(presum,lower,upper,temp,mid+<span class="number">1</span>,right,result);<span class="comment">//使 [mid+1,right] 有序</span></span><br><span class="line">        <span class="comment">//合并之前先统计</span></span><br><span class="line">        <span class="keyword">int</span> i = left ;<span class="comment">// i 指向左区间</span></span><br><span class="line">        <span class="keyword">int</span> j_left = mid+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> j_right = mid+<span class="number">1</span>;<span class="comment">// j_left、j_right 指向右区间，i &lt; j，相减得到区间和</span></span><br><span class="line">        <span class="keyword">while</span>( i &lt; mid+<span class="number">1</span> )<span class="comment">// i 固定时，j 越大差越大；j  固定时，i 越大差越小</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(j_left &lt;= right &amp;&amp; presum[j_left] - presum[i] &lt; lower )<span class="comment">//找到下限位置</span></span><br><span class="line">            &#123;</span><br><span class="line">                j_left++;</span><br><span class="line">            &#125;</span><br><span class="line">            j_right = j_left;</span><br><span class="line">            <span class="keyword">while</span>( j_right &lt;= right &amp;&amp; presum[j_right] - presum[i] &lt;= upper) <span class="comment">//找到上限位置</span></span><br><span class="line">            &#123;</span><br><span class="line">                j_right++;</span><br><span class="line">                result++;<span class="comment">//找到一对</span></span><br><span class="line">            &#125;</span><br><span class="line">            i++;   </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//合并</span></span><br><span class="line">        i = left;</span><br><span class="line">        <span class="keyword">int</span> j = mid+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>( i &lt;= mid &amp;&amp; j &lt;= right)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>( presum[i] &lt;= presum[j])</span><br><span class="line">            &#123;</span><br><span class="line">                temp[t++] = presum[i++];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                temp[t++] = presum[j++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>( i &lt;= mid )</span><br><span class="line">        &#123;</span><br><span class="line">            temp[t++] = presum[i++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>( j &lt;= right )</span><br><span class="line">        &#123;</span><br><span class="line">            temp[t++] = presum[j++];</span><br><span class="line">        &#125;</span><br><span class="line">        t = <span class="number">0</span>;</span><br><span class="line">        i = left;</span><br><span class="line">        <span class="keyword">while</span>( i &lt;= right)</span><br><span class="line">        &#123;</span><br><span class="line">            presum[i++] = temp[t++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;844-比较含退格的字符串-栈结构-2020-10-19&quot;&gt;&lt;a href=&quot;#844-比较含退格的字符串-栈结构-2020-10-19&quot; class=&quot;headerlink&quot; title=&quot;844. 比较含退格的字符串 栈结构  2020.10.19&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="LeetCode" scheme="http://example.com/categories/LeetCode/"/>
    
    <category term="每日一题" scheme="http://example.com/categories/LeetCode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
    <category term="每日刷题记录" scheme="http://example.com/tags/%E6%AF%8F%E6%97%A5%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>树的深度相关</title>
    <link href="http://example.com/2020/10/16/%E6%A0%91%E7%9A%84%E6%B7%B1%E5%BA%A6%E7%9B%B8%E5%85%B3/"/>
    <id>http://example.com/2020/10/16/%E6%A0%91%E7%9A%84%E6%B7%B1%E5%BA%A6%E7%9B%B8%E5%85%B3/</id>
    <published>2020-10-16T07:43:48.000Z</published>
    <updated>2020-10-19T07:38:04.034Z</updated>
    
    <content type="html"><![CDATA[<h1 id="树结构-深度相关"><a href="#树结构-深度相关" class="headerlink" title="树结构 深度相关"></a>树结构 深度相关</h1><h2 id="剑指-Offer-55-II-平衡二叉树-gt-如果某二叉树中任意节点的左右子树的深度相差不超过1，那么它就是一棵平衡二叉树。"><a href="#剑指-Offer-55-II-平衡二叉树-gt-如果某二叉树中任意节点的左右子树的深度相差不超过1，那么它就是一棵平衡二叉树。" class="headerlink" title="剑指 Offer 55 - II. 平衡二叉树 -&gt; 如果某二叉树中任意节点的左右子树的深度相差不超过1，那么它就是一棵平衡二叉树。"></a>剑指 Offer 55 - II. 平衡二叉树 -&gt; 如果某二叉树中任意节点的左右子树的深度相差不超过1，那么它就是一棵平衡二叉树。</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">height</span><span class="params">(TreeNode* root,<span class="keyword">int</span> temp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span> temp;</span><br><span class="line">        <span class="keyword">return</span> max(height(root-&gt;left,temp + <span class="number">1</span>),height(root-&gt;right,temp + <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isBalanced</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">abs</span>(height(root-&gt;left,<span class="number">0</span>) - height(root-&gt;right,<span class="number">0</span>)) &gt; <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> isBalanced(root-&gt;left) &amp;&amp; isBalanced(root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="剑指-Offer-55-I-二叉树的深度"><a href="#剑指-Offer-55-I-二叉树的深度" class="headerlink" title="剑指 Offer 55 - I. 二叉树的深度"></a>剑指 Offer 55 - I. 二叉树的深度</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">height</span><span class="params">(TreeNode* root,<span class="keyword">int</span> temp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>)&#123;</span><br><span class="line">            ans = max(ans,temp);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        height(root-&gt;left,temp + <span class="number">1</span>);</span><br><span class="line">        height(root-&gt;right,temp + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        height(root,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="110-平衡二叉树"><a href="#110-平衡二叉树" class="headerlink" title="110. 平衡二叉树"></a>110. 平衡二叉树</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">height</span><span class="params">(TreeNode* root,<span class="keyword">int</span> temp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span> temp;</span><br><span class="line">        temp += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> max(height(root-&gt;left,temp),height(root-&gt;right,temp));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isBalanced</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">abs</span>(height(root-&gt;left,<span class="number">0</span>) - height(root-&gt;right,<span class="number">0</span>)) &gt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> isBalanced(root-&gt;left) &amp;&amp; isBalanced(root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="剑指-Offer-32-III-从上到下打印二叉树-III-层次遍历"><a href="#剑指-Offer-32-III-从上到下打印二叉树-III-层次遍历" class="headerlink" title="剑指 Offer 32 - III. 从上到下打印二叉树 III. 层次遍历"></a>剑指 Offer 32 - III. 从上到下打印二叉树 III. 层次遍历</h2><h2 id="103-二叉树的锯齿形层次遍历"><a href="#103-二叉树的锯齿形层次遍历" class="headerlink" title="103. 二叉树的锯齿形层次遍历"></a>103. 二叉树的锯齿形层次遍历</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root== <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">queue</span>&lt;TreeNode*&gt; q;</span><br><span class="line">        q.push(root);</span><br><span class="line">        <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">            <span class="keyword">int</span> size = q.size();</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">                TreeNode* top = q.front();</span><br><span class="line">                q.pop();</span><br><span class="line">                temp.push_back(top-&gt;val);</span><br><span class="line">                <span class="keyword">if</span>(top-&gt;left) q.push(top-&gt;left);</span><br><span class="line">                <span class="keyword">if</span>(top-&gt;right) q.push(top-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(index % <span class="number">2</span> != <span class="number">0</span>)&#123;</span><br><span class="line">                reverse(temp.begin(),temp.end());</span><br><span class="line">            &#125;</span><br><span class="line">            index ++;</span><br><span class="line">            ans.push_back(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">levelOrder</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        bfs(root);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="199-二叉树的右视图。铁打的层次遍历"><a href="#199-二叉树的右视图。铁打的层次遍历" class="headerlink" title="199. 二叉树的右视图。铁打的层次遍历"></a>199. 二叉树的右视图。铁打的层次遍历</h2>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root== <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">queue</span>&lt;TreeNode*&gt; q;</span><br><span class="line">        q.push(root);</span><br><span class="line">        <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">            <span class="keyword">int</span> size = q.size();</span><br><span class="line">            <span class="keyword">int</span> temp;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">                TreeNode* top = q.front();</span><br><span class="line">                q.pop();</span><br><span class="line">                temp = top-&gt;val;</span><br><span class="line">                <span class="keyword">if</span>(top-&gt;left) q.push(top-&gt;left);</span><br><span class="line">                <span class="keyword">if</span>(top-&gt;right) q.push(top-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            ans.push_back(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">rightSideView</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        bfs(root);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="429-N叉树的层序遍历。铁打的层次遍历"><a href="#429-N叉树的层序遍历。铁打的层次遍历" class="headerlink" title="429. N叉树的层序遍历。铁打的层次遍历"></a>429. N叉树的层序遍历。铁打的层次遍历</h2> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">layerBfs</span><span class="params">(Node* root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">queue</span>&lt;Node*&gt; q;</span><br><span class="line">        q.push(root);</span><br><span class="line">        <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">            <span class="keyword">int</span> size = q.size();</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">                Node* newNode = q.front();</span><br><span class="line">                q.pop();</span><br><span class="line">                temp.push_back(newNode-&gt;val);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;newNode-&gt;children.size();j++)&#123;</span><br><span class="line">                    q.push(newNode-&gt;children[j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ans.push_back(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">levelOrder</span><span class="params">(Node* root)</span> </span>&#123;</span><br><span class="line">        layerBfs(root);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="107-二叉树的层次遍历-II-铁打的层次遍历"><a href="#107-二叉树的层次遍历-II-铁打的层次遍历" class="headerlink" title="107. 二叉树的层次遍历 II . 铁打的层次遍历"></a>107. 二叉树的层次遍历 II . 铁打的层次遍历</h2> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">layerBfs</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">queue</span>&lt;TreeNode*&gt; q;</span><br><span class="line">        q.push(root);</span><br><span class="line">        <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">            <span class="keyword">int</span> size = q.size();</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">                TreeNode* top = q.front();</span><br><span class="line">                q.pop();</span><br><span class="line">                temp.push_back(top-&gt;val);</span><br><span class="line">                <span class="keyword">if</span>(top-&gt;left) q.push(top-&gt;left);</span><br><span class="line">                <span class="keyword">if</span>(top-&gt;right) q.push(top-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            ans.push_back(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">levelOrderBottom</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        layerBfs(root);</span><br><span class="line">        <span class="keyword">if</span>(ans.size() == <span class="number">0</span>) <span class="keyword">return</span> ans;</span><br><span class="line">        reverse(ans.begin(),ans.end());</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="637-二叉树的层平均值-铁打的层次遍历"><a href="#637-二叉树的层平均值-铁打的层次遍历" class="headerlink" title="637. 二叉树的层平均值.  铁打的层次遍历"></a>637. 二叉树的层平均值.  铁打的层次遍历</h2> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; ans;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">layerAverage</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">queue</span>&lt;TreeNode*&gt; q;</span><br><span class="line">        q.push(root);</span><br><span class="line">        <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">            <span class="keyword">int</span> size = q.size();</span><br><span class="line">            <span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">                TreeNode* top = q.front();</span><br><span class="line">                q.pop();</span><br><span class="line">                sum += top-&gt;val;</span><br><span class="line">                <span class="keyword">if</span>(top-&gt;left) q.push(top-&gt;left);</span><br><span class="line">                <span class="keyword">if</span>(top-&gt;right) q.push(top-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">double</span> index = sum / size;</span><br><span class="line">            ans.push_back(index);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; <span class="title">averageOfLevels</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        layerAverage(root);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1302-层数最深叶子节点的和-铁打的层次遍历"><a href="#1302-层数最深叶子节点的和-铁打的层次遍历" class="headerlink" title="1302. 层数最深叶子节点的和  铁打的层次遍历"></a>1302. 层数最深叶子节点的和  铁打的层次遍历</h2> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">layerBfs</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">queue</span>&lt;TreeNode*&gt; q;</span><br><span class="line">        q.push(root);</span><br><span class="line">        <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">            ans = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> size = q.size();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">                TreeNode* top = q.front();</span><br><span class="line">                q.pop();</span><br><span class="line">                <span class="keyword">if</span>(top-&gt;left == <span class="literal">NULL</span> &amp;&amp; top-&gt;right == <span class="literal">NULL</span>) ans += top-&gt;val;</span><br><span class="line">                <span class="keyword">if</span>(top-&gt;left) q.push(top-&gt;left);</span><br><span class="line">                <span class="keyword">if</span>(top-&gt;right) q.push(top-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deepestLeavesSum</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        layerBfs(root);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="559-N叉树的最大深度-递归法-找到最大深度"><a href="#559-N叉树的最大深度-递归法-找到最大深度" class="headerlink" title="559. N叉树的最大深度.  递归法 找到最大深度"></a>559. N叉树的最大深度.  递归法 找到最大深度</h2> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">height</span><span class="params">(Node* root,<span class="keyword">int</span> h)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span> h;</span><br><span class="line">        <span class="keyword">int</span> ans = h;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> c : root-&gt;children)&#123;</span><br><span class="line">            ans = max(ans,height(c,h + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(Node* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = height(root,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;树结构-深度相关&quot;&gt;&lt;a href=&quot;#树结构-深度相关&quot; class=&quot;headerlink&quot; title=&quot;树结构 深度相关&quot;&gt;&lt;/a&gt;树结构 深度相关&lt;/h1&gt;&lt;h2 id=&quot;剑指-Offer-55-II-平衡二叉树-gt-如果某二叉树中任意节点的左右子树的</summary>
      
    
    
    
    <category term="LeetCode" scheme="http://example.com/categories/LeetCode/"/>
    
    <category term="Tree树结构" scheme="http://example.com/categories/LeetCode/Tree%E6%A0%91%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="每日刷题记录" scheme="http://example.com/tags/%E6%AF%8F%E6%97%A5%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
    <category term="Tree树结构" scheme="http://example.com/tags/Tree%E6%A0%91%E7%BB%93%E6%9E%84/"/>
    
    <category term="树的深度相关" scheme="http://example.com/tags/%E6%A0%91%E7%9A%84%E6%B7%B1%E5%BA%A6%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>使用hexo搭建个人博客</title>
    <link href="http://example.com/2020/10/16/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://example.com/2020/10/16/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-10-16T05:49:23.000Z</published>
    <updated>2020-10-16T07:37:15.820Z</updated>
    
    <content type="html"><![CDATA[<h1 id="准备条件"><a href="#准备条件" class="headerlink" title="准备条件"></a>准备条件</h1><p>GitHub账号<br>域名(可选)</p><h1 id="新建GitHub项目"><a href="#新建GitHub项目" class="headerlink" title="新建GitHub项目"></a>新建GitHub项目</h1><p>首先在 GitHub 新建一个仓库（Repository），名称为 {username}.github.io，注意这个名比较特殊，必须要是 github.io 为后缀结尾的。比如我的用户名是PengYanming1997，那么就新建一个PengYanming1997.github.io的仓库。</p><h1 id="为仓库配置SSH-Key"><a href="#为仓库配置SSH-Key" class="headerlink" title="为仓库配置SSH-Key"></a>为仓库配置SSH-Key</h1><p>因为后期我们更新文章或者提交代码需要有相应的权限才可以，通过用户名和密码不方便且不安全，所以非常有必要配置SSH-Key密钥。</p><h2 id="1-创建密钥对"><a href="#1-创建密钥对" class="headerlink" title="1 创建密钥对"></a>1 创建密钥对</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/. ssh</span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;邮件地址&quot;</span></span><br></pre></td></tr></table></figure><p>然后连续3次回车，最终会生成一个文件在用户目录下，打开用户目录，找到.ssh\id_rsa.pub文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key.<br>注意的是，在MacBook中可能会存在找不到这个文件的情况，可以直接使用命令行进行文件的复制：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pbcopy &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><h2 id="2-测试是否成功"><a href="#2-测试是否成功" class="headerlink" title="2 测试是否成功"></a>2 测试是否成功</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><h2 id="3-配置Git信息"><a href="#3-配置Git信息" class="headerlink" title="3 配置Git信息"></a>3 配置Git信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;PengYanming1997&quot;</span></span><br><span class="line">git config --global user.email  <span class="string">&quot;PengYanming@bupt.edu.cn&quot;</span></span><br></pre></td></tr></table></figure><h1 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h1><h2 id="1-安装Node-js"><a href="#1-安装Node-js" class="headerlink" title="1 安装Node.js"></a>1 安装Node.js</h2><p>首先在自己的电脑上安装 Node.js，下载地址：<a href="https://nodejs.org/zh-cn/download/%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%AE%89%E8%A3%85">https://nodejs.org/zh-cn/download/，可以安装</a> Stable 版本。</p><p>安装完毕之后，确保环境变量配置好，能正常使用 npm 命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm --version</span><br></pre></td></tr></table></figure><h2 id="2-安装Hexo框架"><a href="#2-安装Hexo框架" class="headerlink" title="2 安装Hexo框架"></a>2 安装Hexo框架</h2><p>Hexo是一个博客框架，Hexo 官方还提供了一个命令行工具，用于快速创建项目、页面、编译、部署 Hexo 博客，所以在这之前我们需要先安装 Hexo 的命令行工具。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>由于是从外网下载，所以可能会出现连接超时的现象，可以尝试使用cnpm镜像源进行下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line">cnpm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>安装完毕之后，确保环境变量配置好，能正常使用 hexo 命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo --version</span><br></pre></td></tr></table></figure><h1 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h1><h2 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1 创建项目"></a>1 创建项目</h2><p>使用 Hexo 的命令行创建一个项目，并将其在本地跑起来，整体跑通看看。</p><p>首先使用如下命令创建项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init &#123;name&#125;</span><br></pre></td></tr></table></figure><p>这里的name就是项目名，我这里要创建PengYanming的博客，我就把项目取名为PengYanming了，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init PengYanming</span><br></pre></td></tr></table></figure><p>这样PengYanming文件夹下就会出现 Hexo 的初始化文件，包括 themes、scaffolds、source 等文件夹。</p><h2 id="2-编译生成HTML代码"><a href="#2-编译生成HTML代码" class="headerlink" title="2 编译生成HTML代码"></a>2 编译生成HTML代码</h2><p>首先进入新生成的文件夹里面，然后调用 Hexo 的 generate 命令，将 Hexo 编译生成 HTML 代码，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>可以看到输出结果里面包含了 js、css、font 等内容，并发现他们都处在了项目根目录下的 public 文件夹下面了。</p><h2 id="3-本地运行项目"><a href="#3-本地运行项目" class="headerlink" title="3 本地运行项目"></a>3 本地运行项目</h2><p>利用 Hexo 提供的 serve 命令把博客在本地运行起来，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo serve</span><br></pre></td></tr></table></figure><p>项目成功运行在本地的4000端口上，浏览器访问<a href="http://localhost:4000：">http://localhost:4000：</a></p><h1 id="部署项目"><a href="#部署项目" class="headerlink" title="部署项目"></a>部署项目</h1><p>将这个初始化的博客进行一下部署，放到 GitHub Pages 上面验证一下其可用性。成功之后我们可以再进行后续的修改，比如修改主题、修改页面配置等等。</p><p>Hexo 已经给我们提供一个命令，利用它我们可以直接将博客一键部署，不需要手动去配置服务器或进行其他的各项配置。</p><h2 id="1-修改部署地址"><a href="#1-修改部署地址" class="headerlink" title="1 修改部署地址"></a>1 修改部署地址</h2><p>打开根目录下的 _config.yml 文件，找到 Deployment 这个地方，把刚才新建的 Repository 的地址贴过来，然后指定分支为 master 分支，最终修改为如下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://github.com/PengYanming1997/PengYanming1997.github.io.git</span><br><span class="line">  branch: master</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"><span class="comment">## 2 安装Git部署插件 </span></span><br><span class="line">需要额外安装一个支持 Git 的部署插件，名字叫做hexo-deployer-git，有了它我们才可以顺利将其部署到 GitHub 上面，如果不安装的话，在执行部署命令时会报如下错误：</span><br><span class="line">``` bash</span><br><span class="line">Deployer not found: git</span><br><span class="line">``` </span><br><span class="line">安装hexo-deployer-git插件的命令如下：</span><br><span class="line">``` bash</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h2 id="3-部署项目"><a href="#3-部署项目" class="headerlink" title="3 部署项目"></a>3 部署项目</h2><p>安装成功后，执行部署命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>这时候我们访问一下 GitHub Repository 同名的链接，比如我的PengYanming1997博客的 Repository 名称取的是PengYanming1997.github.io，那我就访问 <a href="http://pengyanming1997.github.io,这时候我们就可以看到跟本地一模一样的博客内容了./">http://PengYanming1997.github.io，这时候我们就可以看到跟本地一模一样的博客内容了。</a></p><p>查看一下GitHub上的内容：</p><p>这些内容实际上是博客文件夹下面的 public 文件夹下的所有内容，Hexo 把编译之后的静态页面内容上传到 GitHub 的 master 分支上面去了。</p><h2 id="4-上传博客源代码到GitHub仓库"><a href="#4-上传博客源代码到GitHub仓库" class="headerlink" title="4 上传博客源代码到GitHub仓库"></a>4 上传博客源代码到GitHub仓库</h2><p>那我博客的源码也想放到 GitHub 上面怎么办呢？其实很简单，新建一个其他的分支就好了，比如我这边就新建了一个 source 分支，代表博客源码的意思。</p><p>具体的添加过程就很简单了，参考如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git init    <span class="comment"># 初始化项目</span></span><br><span class="line">git checkout -b <span class="built_in">source</span>    <span class="comment"># 创建并切换到source分支</span></span><br><span class="line">git add -A    <span class="comment"># 添加所有文件到暂存区</span></span><br><span class="line">git commit -m <span class="string">&quot;init blog&quot;</span>    <span class="comment"># 提交并注释</span></span><br><span class="line">git remote add origin github.com/PengYanming1997/PengYanming1997.github.io.git    <span class="comment"># 添加到远程仓库</span></span><br><span class="line">git push origin <span class="built_in">source</span>    <span class="comment"># 将代码提交到远程的source分支</span></span><br></pre></td></tr></table></figure><p>在GitHub仓库中可以看到已经有两个分支</p><h1 id="配置站点信息"><a href="#配置站点信息" class="headerlink" title="配置站点信息"></a>配置站点信息</h1><p>完成如上内容之后，实际上我们只完成了博客搭建的一小步，因为我们仅仅是把初始化的页面部署成功了，博客里面还没有设置任何有效的信息。下面就让我们来进行一下博客的基本配置，另外换一个好看的主题，配置一些其他的内容，让博客真正变成属于我们自己的博客吧。</p><h2 id="1-修改站点标题，关键字信息"><a href="#1-修改站点标题，关键字信息" class="headerlink" title="1 修改站点标题，关键字信息"></a>1 修改站点标题，关键字信息</h2><p>修改根目录下的 _config.yml 文件，找到 Site 区域，这里面可以配置站点标题 title、副标题 subtitle 等内容、关键字 keywords 等内容，比如我的就修改为如下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line">title: PengYanming1997</span><br><span class="line">subtitle: 进阶中的小小程序媛</span><br><span class="line">description: 记录一些生活中的小想法，以及工作进展 &amp; tricks</span><br><span class="line">keywords: <span class="string">&quot;&quot;</span></span><br><span class="line">author: ReTinaPeng</span><br><span class="line">language: zh-CN</span><br><span class="line">timezone: Asia/Shanghai</span><br></pre></td></tr></table></figure><p>hexo serve在本地运行并在浏览器中打开测试</p><h2 id="2-修改主题"><a href="#2-修改主题" class="headerlink" title="2 修改主题"></a>2 修改主题</h2><p>目前 Hexo 里面应用最多的主题基本就是 Next 主题了，个人感觉这个主题还是挺好看的，另外它支持的插件和功能也极为丰富，配置了这个主题，我们的博客可以支持更多的扩展功能，比如阅览进度条、中英文空格排版、图片懒加载等等。</p><p>目前 Next 主题已经更新到 7.x 版本了，我们可以直接到 Next 主题的 GitHub Repository 上把这个主题下载下来。</p><p>首先命令行进入到项目的根目录，执行如下命令即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>执行完毕之后 Next 主题的源码就会出现在项目的 themes/next 文件夹下。</p><p>修改下博客所用的主题名称，修改项目根目录下的 _config.yml 文件，找到 theme 字段，修改为 next 即可，修改如下：</p><p>theme: next<br>然后本地重新开启服务，访问刷新下页面，就可以看到 next 主题就切换成功了</p><h2 id="3-配置主题"><a href="#3-配置主题" class="headerlink" title="3 配置主题"></a>3 配置主题</h2><p>现在我们已经成功切换到 next 主题上面了，接下来我们就对主题进行进一步地详细配置吧，比如修改样式、增加其他各项功能的支持。</p><p>Next 主题内部也提供了一个配置文件，名字同样叫做 _config.yml，只不过位置不一样，它在 themes/next 文件夹下，Next 主题里面所有的功能都可以通过这个配置文件来控制，下文所述的内容都是修改的 themes/next/_config.yml 文件。</p><p>Next 主题还提供了多种样式，风格都是类似黑白的搭配，但整个布局位置不太一样，通过修改配置文件的 scheme 字段即可，我选了 Pisces 样式，修改 _config.yml （注意是 themes/next/_config.yml 文件）如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">scheme: Pisces</span><br><span class="line">另外还有几个可选项，比如：</span><br><span class="line"></span><br><span class="line"><span class="comment"># scheme: Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line">scheme: Pisces</span><br><span class="line"><span class="comment">#scheme: Gemini</span></span><br></pre></td></tr></table></figure><p>重新在本地运行，浏览器查看就已经变成Pisces样式了：</p><p>favicon 就是站点标签栏的小图标，默认是用的 Hexo 的小图标，如果我们有站点 Logo 的图片的话，我们可以自己定制小图标。</p><p>但这并不意味着我们需要自己用 PS 自己来设计，已经有一个网站可以直接将图片转化为站点小图标，站点链接为：<a href="https://realfavicongenerator.net,到这里上传一张图,便可以直接打包下载各种尺寸和适配不同设备的小图标./">https://realfavicongenerator.net，到这里上传一张图，便可以直接打包下载各种尺寸和适配不同设备的小图标。</a></p><p>图标下载下来之后把它放在 themes/next/source/images 目录下面。</p><p>然后在配置文件里面找到 favicon 配置项，把一些相关路径配置进去即可，示例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">favicon:</span><br><span class="line">  small: /images/favicon-16x16.png</span><br><span class="line">  medium: /images/favicon-32x32.png</span><br><span class="line">  apple_touch_icon: /images/apple-touch-icon.png</span><br><span class="line">  safari_pinned_tab: /images/safari-pinned-tab.svg</span><br></pre></td></tr></table></figure><p>配置完成之后刷新页面，整个页面的标签图标就被更新了。</p><p>avatar 这个就类似站点的头像，如果设置了这个，会在站点的作者信息旁边额外显示一个头像，将其放置到 themes/next/source/images/avatar.png 路径，然后在主题 _config.yml 文件下编辑 avatar 的配置，修改为正确的路径即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line">avatar:</span><br><span class="line">  <span class="comment"># In theme directory (source/images): /images/avatar.gif</span></span><br><span class="line">  <span class="comment"># In site directory (source/uploads): /uploads/avatar.gif</span></span><br><span class="line">  <span class="comment"># You can also use other linking images.</span></span><br><span class="line">  url: /images/avatar.png</span><br><span class="line">  <span class="comment"># If true, the avatar would be dispalyed in circle.</span></span><br><span class="line">  rounded: <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If true, the avatar would be rotated with the cursor.</span></span><br><span class="line">  rotated: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>配置完成之后刷新页面，头像的图片就会显示出来。</p><p>博客一般是需要 RSS 订阅的，如果要开启 RSS 订阅，这里需要安装一个插件，叫做 hexo-generator-feed，安装完成之后，站点会自动生成 RSS Feed 文件，安装命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><p>在项目根目录下运行这个命令，安装完成之后不需要其他的配置，以后每次编译生成站点的时候就会自动生成 RSS Feed 文件了。</p><p>作为一个为程序员，虽然代码敲的不咋样，但是代码块的显示还是需要很讲究的，默认的代码块我个人不是特别喜欢，因此我把代码的颜色修改为黑色，并把复制按钮的样式修改为类似 Mac 的样式，修改 _config.yml 文件的 codeblock 区块如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">codeblock:</span><br><span class="line">  <span class="comment"># Code Highlight theme</span></span><br><span class="line">  <span class="comment"># Available values: normal | night | night eighties | night blue | night bright | solarized | solarized dark | galactic</span></span><br><span class="line">  <span class="comment"># See: https://github.com/chriskempson/tomorrow-theme</span></span><br><span class="line">  <span class="comment"># highlight_theme: normal</span></span><br><span class="line">  highlight_theme: night bright</span><br><span class="line">  <span class="comment"># Add copy button on codeblock</span></span><br><span class="line">  copy_button:</span><br><span class="line">    <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Show text copy result.</span></span><br><span class="line">    show_result: <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Available values: default | flat | mac</span></span><br><span class="line">    style: mac</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">我们在浏览网页的时候，如果已经看完了想快速返回到网站的上端，一般都是有一个按钮来辅助的，这里也支持它的配置，修改 _config.yml 的 back2top 字段即可，我的设置如下：</span><br><span class="line">``` bash</span><br><span class="line">back2top:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Back to top in sidebar.</span></span><br><span class="line">  sidebar: <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Scroll percent label in b2t button.</span></span><br><span class="line">  scrollpercent: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>enable 默认为 true，即默认显示。sidebar 如果设置为 true，按钮会出现在侧栏下方，个人觉得并不是很好看，就取消了，scrollpercent 就是显示阅读百分比，个人觉得还不错，就将其设置为 true。</p><p>reading_process，阅读进度。大家可能注意到有些站点的最上侧会出现一个细细的进度条，代表页面加载进度和阅读进度，如果大家想设置的话也可以试试，我将其打开了，修改 _config.yml 如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Reading progress bar</span></span><br><span class="line">reading_progress:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Available values: top | bottom</span></span><br><span class="line">  position: top</span><br><span class="line">  color: <span class="string">&quot;#222&quot;</span></span><br><span class="line">  height: 2px</span><br></pre></td></tr></table></figure><p>书签，可以根据阅读历史记录，在下次打开页面的时候快速帮助我们定位到上次的位置，大家可以根据喜好开启和关闭，我的配置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">bookmark:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Customize the color of the bookmark.</span></span><br><span class="line">  color: <span class="string">&quot;#222&quot;</span></span><br><span class="line">  <span class="comment"># If auto, save the reading progress when closing the page or clicking the bookmark-icon.</span></span><br><span class="line">  <span class="comment"># If manual, only save it by clicking the bookmark-icon.</span></span><br><span class="line">  save: auto</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">在一些技术博客上，大家可能注意到在页面的右上角有个 GitHub 图标，点击之后可以跳转到其源码页面，可以为 GitHub Repository 引流，大家如果想显示的话可以自行选择打开，我的配置如下：</span><br><span class="line">``` bash</span><br><span class="line"><span class="comment"># `Follow me on GitHub` banner in the top-right corner.</span></span><br><span class="line">github_banner:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  permalink: https://github.com/PengYanming1997/PengYanming1997.github.io.git</span><br><span class="line">  title: Follow 59devops on GitHub</span><br></pre></td></tr></table></figure><p>由于 Hexo 的博客是静态博客，而且也没有连接数据库的功能，所以它的评论功能是不能自行集成的，但可以集成第三方的服务。</p><p>Next 主题里面提供了多种评论插件的集成，有 changyan | disqus | disqusjs | facebook_comments_plugin | gitalk | livere | valine | vkontakte 这些。</p><p>首先需要在 GitHub 上面注册一个 OAuth Application，链接为：<a href="https://github.com/settings/applications/new%EF%BC%8C%E6%B3%A8%E5%86%8C%E5%AE%8C%E6%AF%95%E4%B9%8B%E5%90%8E%E6%8B%BF%E5%88%B0">https://github.com/settings/applications/new，注册完毕之后拿到</a> Client ID、Client Secret 就可以了。</p><p>首先需要在 _config.yml 文件的 comments 区域配置使用 gitalk：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Multiple Comment System Support</span></span><br><span class="line">comments:</span><br><span class="line">  <span class="comment"># Available values: tabs | buttons</span></span><br><span class="line">  style: tabs</span><br><span class="line">  <span class="comment"># Choose a comment system to be displayed by default.</span></span><br><span class="line">  <span class="comment"># Available values: changyan | disqus | disqusjs | facebook_comments_plugin | gitalk | livere | valine | vkontakte</span></span><br><span class="line">  active: gitalk</span><br></pre></td></tr></table></figure><p>主要是 comments.active 字段选择对应的名称即可。</p><p>然后找打 gitalk 配置，添加它的各项配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Gitalk</span></span><br><span class="line"><span class="comment"># Demo: https://gitalk.github.io</span></span><br><span class="line"><span class="comment"># For more information: https://github.com/gitalk/gitalk</span></span><br><span class="line">gitalk:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  github_id: 59devops</span><br><span class="line">  repo: 59devops.github.io</span><br><span class="line">  client_id: cb34a61011c438548cec</span><br><span class="line">  client_secret: 3d9c756a081ce2b91a6a286eb1a0a02a71ced6ca</span><br><span class="line">  admin_user: 59devops</span><br><span class="line">  distraction_free_mode: <span class="literal">true</span> <span class="comment"># Facebook-like distraction free mode</span></span><br><span class="line">  <span class="comment"># Gitalk&#x27;s display language depends on user&#x27;s browser or system environment</span></span><br><span class="line">  <span class="comment"># If you want everyone visiting your site to see a uniform language, you can set a force language value</span></span><br><span class="line">  <span class="comment"># Available values: en | es-ES | fr | ru | zh-CN | zh-TW</span></span><br><span class="line">  language: zh-CN</span><br></pre></td></tr></table></figure><p>GitHub 授权登录之后就可以使用了，评论的内容会自动出现在 Issue 里面。</p><p>如果你习惯在中文和英文之间留空格的话，pangu 就是来解决这个问题的，我们只需要在主题里面开启这个选项，在编译生成页面的时候，中英文之间就会自动添加空格，看起来更加美观。</p><p>具体的修改如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">pangu: <span class="literal">true</span></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">可能在一些情况下我们需要写一个公式，比如演示一个算法推导过程，MarkDown 是支持公式显示的，Hexo 的 Next 主题同样是支持的。</span><br><span class="line"></span><br><span class="line">Next 主题提供了两个渲染引擎，分别是 mathjax 和 katex，后者相对前者来说渲染速度更快，而且不需要 JavaScript 的额外支持，但后者支持的功能现在还不如前者丰富，具体的对比可以看官方文档：https://theme-next.org/docs/third-party-services/math-equations。</span><br><span class="line"></span><br><span class="line">这里选择了 mathjax，通过修改配置即可启用：</span><br><span class="line">``` bash</span><br><span class="line">math:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Default (true) will load mathjax / katex script on demand.</span></span><br><span class="line">  <span class="comment"># That is it only render those page which has `mathjax: true` in Front-matter.</span></span><br><span class="line">  <span class="comment"># If you set it to false, it will load mathjax / katex srcipt EVERY PAGE.</span></span><br><span class="line">  per_page: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># hexo-renderer-pandoc (or hexo-renderer-kramed) required for full MathJax support.</span></span><br><span class="line">  mathjax:</span><br><span class="line">    <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">    <span class="comment"># See: https://mhchem.github.io/MathJax-mhchem/</span></span><br><span class="line">    mhchem: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>mathjax 的使用需要我们额外安装一个插件，叫做 hexo-renderer-kramed，另外也可以安装 hexo-renderer-pandoc，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm un hexo-renderer-marked --save</span><br><span class="line">npm i hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure><p>另外还有其他的插件支持，大家可以到官方文档查看。</p><p>可能大家听说过 Ajax，没听说过 pjax，这个技术实际上就是利用 Ajax 技术实现了局部页面刷新，既可以实现 URL 的更换，有可以做到无刷新加载。</p><p>要开启这个功能需要先将 pjax 功能开启，然后安装对应的 pjax 依赖库，首先修改 _config.yml 修改如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pjax: <span class="literal">true</span></span><br><span class="line">``` </span><br><span class="line">然后安装依赖库，切换到 next 主题下，然后安装依赖库：</span><br><span class="line">``` bash</span><br><span class="line"><span class="built_in">cd</span> themes/next</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-pjax <span class="built_in">source</span>/lib/pjax</span><br></pre></td></tr></table></figure><p>这样 pjax 就开启了，页面就可以实现无刷新加载了。</p><h1 id="主题的其他配置-："><a href="#主题的其他配置-：" class="headerlink" title="主题的其他配置 ："></a>主题的其他配置 ：</h1><p>参考官方文档：<a href="https://theme-next.org/docs/%E3%80%82">https://theme-next.org/docs/。</a></p><h1 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h1><h2 id="1-新建文章"><a href="#1-新建文章" class="headerlink" title="1 新建文章"></a>1 新建文章</h2><p>Hexo默认安装完就会有一篇文章，我们需要借助hexo命令添加新的文章：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new hello-hexo</span><br></pre></td></tr></table></figure><p>创建的文章会出现在 source/_posts 文件夹下，是 MarkDown 格式。</p><h2 id="2-文章的标签和分类"><a href="#2-文章的标签和分类" class="headerlink" title="2 文章的标签和分类"></a>2 文章的标签和分类</h2><p>在文章开头通过如下格式添加必要信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标题 <span class="comment"># 自动创建，如 hello-world</span></span><br><span class="line">date: 日期 <span class="comment"># 自动创建，如 2019-09-22 01:47:21</span></span><br><span class="line">tags: </span><br><span class="line">- 标签1</span><br><span class="line">- 标签2</span><br><span class="line">- 标签3</span><br><span class="line">categories:</span><br><span class="line">- 分类1</span><br><span class="line">- 分类2</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>开头下方撰写正文，MarkDown 格式书写即可。</p><p>这样在下次编译的时候就会自动识别标题、时间、类别等等，另外还有其他的一些参数设置，可以参考文档：<a href="https://hexo.io/zh-cn/docs/writing.html%E3%80%82">https://hexo.io/zh-cn/docs/writing.html。</a></p><h2 id="3-博客首页只显示文章标题和摘要"><a href="#3-博客首页只显示文章标题和摘要" class="headerlink" title="3 博客首页只显示文章标题和摘要"></a>3 博客首页只显示文章标题和摘要</h2><p>默认情况下hexo博客(如本站)的首页显示的是完整的文章 – 而文章比较长的时候这无疑会带来诸多不便。只要加入一个<a id="more"></a>这样的占位符在文章正文里面即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这就是一个简介</span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line">这里更多的内容</span><br></pre></td></tr></table></figure><h1 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h1><p>现在我们的博客只有首页、文章页，如果我们想要增加标签页，可以自行添加，这里 Hexo 也给我们提供了这个功能，在根目录执行命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><p>执行这个命令之后会自动帮我们生成一个 source/tags/index.md 文件，内容就只有这样子的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2019-09-27 11:42:49</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>我们可以自行添加一个 type 字段来指定页面的类型：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span>: tags</span><br><span class="line">comments: <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>然后再在主题的 _config.yml 文件将这个页面的链接添加到主菜单里面，修改 menu 字段如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  <span class="comment">#about: /about/ || user</span></span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  <span class="comment">#categories: /categories/ || th</span></span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure><p>可以看到左侧导航也出现了标签，点击之后右侧会显示标签的列表。</p><h1 id="分类页"><a href="#分类页" class="headerlink" title="分类页"></a>分类页</h1><p>分类功能和标签类似，一个文章可以对应某个分类，如果要增加分类页面可以使用如下命令创建：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br><span class="line">``` </span><br><span class="line">然后同样地，会生成一个 <span class="built_in">source</span>/categories/index.md 文件。</span><br><span class="line"></span><br><span class="line">我们可以自行添加一个 <span class="built_in">type</span> 字段来指定页面的类型：</span><br><span class="line">``` bash</span><br><span class="line"><span class="built_in">type</span>: categories</span><br><span class="line">comments: <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>然后再在主题的 _config.yml 文件将这个页面的链接添加到主菜单里面，修改 menu 字段如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  <span class="comment">#about: /about/ || user</span></span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  categories: /categories/ || th</span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure><h1 id="搜索页"><a href="#搜索页" class="headerlink" title="搜索页"></a>搜索页</h1><p>很多情况下我们需要搜索全站的内容，所以一个搜索功能的支持也是很有必要的。</p><p>如果要添加搜索的支持，需要先安装一个插件，叫做 hexo-generator-searchdb，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><p>然后在项目的 _config.yml 里面添加搜索设置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  <span class="built_in">limit</span>: 10000</span><br></pre></td></tr></table></figure><p>然后在主题的 _config.yml 里面修改如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Local Search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/wzpan/hexo-generator-search</span></span><br><span class="line">local_search:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  trigger: auto</span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  top_n_per_article: 5</span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  unescape: <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  preload: <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>这里用的是 Local Search，如果想启用其他是 Search Service 的话可以参考官方文档：<a href="https://theme-next.org/docs/third-party-services/search-services%E3%80%82">https://theme-next.org/docs/third-party-services/search-services。</a></p><h1 id="404页面"><a href="#404页面" class="headerlink" title="404页面"></a>404页面</h1><p>另外还需要添加一个 404 页面，直接在根目录 source 文件夹新建一个 404.md 文件即可，内容可以仿照如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 404 Not Found</span><br><span class="line">date: 2019-09-27 12:21:37</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">&lt;center&gt;</span><br><span class="line">对不起，您所访问的页面不存在或者已删除。</span><br><span class="line">您可以&lt;a href=<span class="string">&quot;https://blog.59devops.com&gt;&quot;</span>&gt;点击此处&lt;/a&gt;返回首页。</span><br><span class="line">&lt;/center&gt;</span><br><span class="line"></span><br><span class="line">&lt;blockquote class=<span class="string">&quot;blockquote-center&quot;</span>&gt;</span><br><span class="line">    59Dveops</span><br><span class="line">&lt;/blockquote&gt;</span><br><span class="line">``` </span><br><span class="line">这里面的一些相关信息和链接可以替换成自己的。</span><br><span class="line"></span><br><span class="line">其实 Hexo 还有很多很多功能，可以直接参考官方文档：https://hexo.io/zh-cn/docs/ 查看更多的配置。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署脚本</span></span><br><span class="line"></span><br><span class="line">最后我这边还增加了一个简易版的部署脚本，其实就是重新 gererate 下文件，然后重新部署。在根目录下新建一个 deploy.sh 的脚本文件，内容如下：</span><br><span class="line">``` bash</span><br><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>这样我们在部署发布的时候只需要执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh deploy.sh</span><br></pre></td></tr></table></figure><p>就可以完成博客的更新了，非常简单。</p><h1 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h1><p>将页面修改之后可以用上面的脚本重新部署下博客，其内容便会跟着更新。</p><p>另外我们也可以在 GitHub 的 Repository 里面设置域名，找到 Settings，拉到下面，可以看到有个 GitHub Pages 的配置项</p><p>下面有个 custom domain 的选项，输入你想自定义的域名地址，然后添加 CNAME 解析就好了。</p><p>另外下面还有一个 Enforce HTTPS 的选项，GitHub Pages 会在我们配置自定义域名之后自动帮我们配置 HTTPS 服务。刚配置完自定义域名的时候可能这个选项是不可用的，一段时间后等到其可以勾选了，直接勾选即可，这样整个博客就会变成 HTTPS 的协议的了。</p><p>另外有一个值得注意的地方，如果配置了自定义域名，在目前的情况下，每次部署的时候这个自定义域名的设置是会被自动清除的。所以为了避免这个情况，我们需要在项目目录下面新建一个 CNAME 文件，路径为 source/CNAME，内容就是自定义域名。</p><p>这样避免了每次部署的时候自定义域名被清除的情况了。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;准备条件&quot;&gt;&lt;a href=&quot;#准备条件&quot; class=&quot;headerlink&quot; title=&quot;准备条件&quot;&gt;&lt;/a&gt;准备条件&lt;/h1&gt;&lt;p&gt;GitHub账号&lt;br&gt;域名(可选)&lt;/p&gt;
&lt;h1 id=&quot;新建GitHub项目&quot;&gt;&lt;a href=&quot;#新建GitHub项目&quot; class=&quot;headerlink&quot; title=&quot;新建GitHub项目&quot;&gt;&lt;/a&gt;新建GitHub项目&lt;/h1&gt;&lt;p&gt;首先在 GitHub 新建一个仓库（Repository），名称为 {username}.github.io，注意这个名比较特殊，必须要是 github.io 为后缀结尾的。比如我的用户名是PengYanming1997，那么就新建一个PengYanming1997.github.io的仓库。&lt;/p&gt;
&lt;h1 id=&quot;为仓库配置SSH-Key&quot;&gt;&lt;a href=&quot;#为仓库配置SSH-Key&quot; class=&quot;headerlink&quot; title=&quot;为仓库配置SSH-Key&quot;&gt;&lt;/a&gt;为仓库配置SSH-Key&lt;/h1&gt;&lt;p&gt;因为后期我们更新文章或者提交代码需要有相应的权限才可以，通过用户名和密码不方便且不安全，所以非常有必要配置SSH-Key密钥。&lt;/p&gt;
&lt;h2 id=&quot;1-创建密钥对&quot;&gt;&lt;a href=&quot;#1-创建密钥对&quot; class=&quot;headerlink&quot; title=&quot;1 创建密钥对&quot;&gt;&lt;/a&gt;1 创建密钥对&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; ~/. ssh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ssh-keygen -t rsa -C &lt;span class=&quot;string&quot;&gt;&amp;quot;邮件地址&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后连续3次回车，最终会生成一个文件在用户目录下，打开用户目录，找到.ssh\id_rsa.pub文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&amp;gt; SSH and GPG keys -&amp;gt; New SSH key.&lt;br&gt;注意的是，在MacBook中可能会存在找不到这个文件的情况，可以直接使用命令行进行文件的复制：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pbcopy &amp;lt; ~/.ssh/id_rsa.pub&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;2-测试是否成功&quot;&gt;&lt;a href=&quot;#2-测试是否成功&quot; class=&quot;headerlink&quot; title=&quot;2 测试是否成功&quot;&gt;&lt;/a&gt;2 测试是否成功&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ssh -T git@github.com&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;h2 id=&quot;3-配置Git信息&quot;&gt;&lt;a href=&quot;#3-配置Git信息&quot; class=&quot;headerlink&quot; title=&quot;3 配置Git信息&quot;&gt;&lt;/a&gt;3 配置Git信息&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git config --global user.name &lt;span class=&quot;string&quot;&gt;&amp;quot;PengYanming1997&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global user.email  &lt;span class=&quot;string&quot;&gt;&amp;quot;PengYanming@bupt.edu.cn&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;h1 id=&quot;安装环境&quot;&gt;&lt;a href=&quot;#安装环境&quot; class=&quot;headerlink&quot; title=&quot;安装环境&quot;&gt;&lt;/a&gt;安装环境&lt;/h1&gt;&lt;h2 id=&quot;1-安装Node-js&quot;&gt;&lt;a href=&quot;#1-安装Node-js&quot; class=&quot;headerlink&quot; title=&quot;1 安装Node.js&quot;&gt;&lt;/a&gt;1 安装Node.js&lt;/h2&gt;&lt;p&gt;首先在自己的电脑上安装 Node.js，下载地址：&lt;a href=&quot;https://nodejs.org/zh-cn/download/%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%AE%89%E8%A3%85&quot;&gt;https://nodejs.org/zh-cn/download/，可以安装&lt;/a&gt; Stable 版本。&lt;/p&gt;
&lt;p&gt;安装完毕之后，确保环境变量配置好，能正常使用 npm 命令。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm --version&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;h2 id=&quot;2-安装Hexo框架&quot;&gt;&lt;a href=&quot;#2-安装Hexo框架&quot; class=&quot;headerlink&quot; title=&quot;2 安装Hexo框架&quot;&gt;&lt;/a&gt;2 安装Hexo框架&lt;/h2&gt;&lt;p&gt;Hexo是一个博客框架，Hexo 官方还提供了一个命令行工具，用于快速创建项目、页面、编译、部署 Hexo 博客，所以在这之前我们需要先安装 Hexo 的命令行工具。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo npm install -g hexo-cli&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;由于是从外网下载，所以可能会出现连接超时的现象，可以尝试使用cnpm镜像源进行下载&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install -g cnpm --registry=https://registry.npm.taobao.org&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cnpm install hexo-cli -g&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;安装完毕之后，确保环境变量配置好，能正常使用 hexo 命令。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo --version&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&quot;初始化项目&quot;&gt;&lt;a href=&quot;#初始化项目&quot; class=&quot;headerlink&quot; title=&quot;初始化项目&quot;&gt;&lt;/a&gt;初始化项目&lt;/h1&gt;&lt;h2 id=&quot;1-创建项目&quot;&gt;&lt;a href=&quot;#1-创建项目&quot; class=&quot;headerlink&quot; title=&quot;1 创建项目&quot;&gt;&lt;/a&gt;1 创建项目&lt;/h2&gt;&lt;p&gt;使用 Hexo 的命令行创建一个项目，并将其在本地跑起来，整体跑通看看。&lt;/p&gt;
&lt;p&gt;首先使用如下命令创建项目：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo init &amp;#123;name&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里的name就是项目名，我这里要创建PengYanming的博客，我就把项目取名为PengYanming了，命令如下：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo init PengYanming&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这样PengYanming文件夹下就会出现 Hexo 的初始化文件，包括 themes、scaffolds、source 等文件夹。&lt;/p&gt;
&lt;h2 id=&quot;2-编译生成HTML代码&quot;&gt;&lt;a href=&quot;#2-编译生成HTML代码&quot; class=&quot;headerlink&quot; title=&quot;2 编译生成HTML代码&quot;&gt;&lt;/a&gt;2 编译生成HTML代码&lt;/h2&gt;&lt;p&gt;首先进入新生成的文件夹里面，然后调用 Hexo 的 generate 命令，将 Hexo 编译生成 HTML 代码，命令如下：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;可以看到输出结果里面包含了 js、css、font 等内容，并发现他们都处在了项目根目录下的 public 文件夹下面了。&lt;/p&gt;
&lt;h2 id=&quot;3-本地运行项目&quot;&gt;&lt;a href=&quot;#3-本地运行项目&quot; class=&quot;headerlink&quot; title=&quot;3 本地运行项目&quot;&gt;&lt;/a&gt;3 本地运行项目&lt;/h2&gt;&lt;p&gt;利用 Hexo 提供的 serve 命令把博客在本地运行起来，命令如下：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo serve&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;项目成功运行在本地的4000端口上，浏览器访问&lt;a href=&quot;http://localhost:4000：&quot;&gt;http://localhost:4000：&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;部署项目&quot;&gt;&lt;a href=&quot;#部署项目&quot; class=&quot;headerlink&quot; title=&quot;部署项目&quot;&gt;&lt;/a&gt;部署项目&lt;/h1&gt;&lt;p&gt;将这个初始化的博客进行一下部署，放到 GitHub Pages 上面验证一下其可用性。成功之后我们可以再进行后续的修改，比如修改主题、修改页面配置等等。&lt;/p&gt;
&lt;p&gt;Hexo 已经给我们提供一个命令，利用它我们可以直接将博客一键部署，不需要手动去配置服务器或进行其他的各项配置。&lt;/p&gt;
&lt;h2 id=&quot;1-修改部署地址&quot;&gt;&lt;a href=&quot;#1-修改部署地址&quot; class=&quot;headerlink&quot; title=&quot;1 修改部署地址&quot;&gt;&lt;/a&gt;1 修改部署地址&lt;/h2&gt;&lt;p&gt;打开根目录下的 _config.yml 文件，找到 Deployment 这个地方，把刚才新建的 Repository 的地址贴过来，然后指定分支为 master 分支，最终修改为如下内容：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Deployment&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;## Docs: https://hexo.io/docs/deployment.html&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;deploy:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;: git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  repo: https://github.com/PengYanming1997/PengYanming1997.github.io.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  branch: master&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;``` &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;## 2 安装Git部署插件 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;需要额外安装一个支持 Git 的部署插件，名字叫做hexo-deployer-git，有了它我们才可以顺利将其部署到 GitHub 上面，如果不安装的话，在执行部署命令时会报如下错误：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;``` bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Deployer not found: git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;``` &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;安装hexo-deployer-git插件的命令如下：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;``` bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-deployer-git --save&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;3-部署项目&quot;&gt;&lt;a href=&quot;#3-部署项目&quot; class=&quot;headerlink&quot; title=&quot;3 部署项目&quot;&gt;&lt;/a&gt;3 部署项目&lt;/h2&gt;&lt;p&gt;安装成功后，执行部署命令：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这时候我们访问一下 GitHub Repository 同名的链接，比如我的PengYanming1997博客的 Repository 名称取的是PengYanming1997.github.io，那我就访问 &lt;a href=&quot;http://pengyanming1997.github.io,这时候我们就可以看到跟本地一模一样的博客内容了./&quot;&gt;http://PengYanming1997.github.io，这时候我们就可以看到跟本地一模一样的博客内容了。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;查看一下GitHub上的内容：&lt;/p&gt;
&lt;p&gt;这些内容实际上是博客文件夹下面的 public 文件夹下的所有内容，Hexo 把编译之后的静态页面内容上传到 GitHub 的 master 分支上面去了。&lt;/p&gt;
&lt;h2 id=&quot;4-上传博客源代码到GitHub仓库&quot;&gt;&lt;a href=&quot;#4-上传博客源代码到GitHub仓库&quot; class=&quot;headerlink&quot; title=&quot;4 上传博客源代码到GitHub仓库&quot;&gt;&lt;/a&gt;4 上传博客源代码到GitHub仓库&lt;/h2&gt;&lt;p&gt;那我博客的源码也想放到 GitHub 上面怎么办呢？其实很简单，新建一个其他的分支就好了，比如我这边就新建了一个 source 分支，代表博客源码的意思。&lt;/p&gt;
&lt;p&gt;具体的添加过程就很简单了，参考如下命令：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git init    &lt;span class=&quot;comment&quot;&gt;# 初始化项目&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git checkout -b &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;    &lt;span class=&quot;comment&quot;&gt;# 创建并切换到source分支&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git add -A    &lt;span class=&quot;comment&quot;&gt;# 添加所有文件到暂存区&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git commit -m &lt;span class=&quot;string&quot;&gt;&amp;quot;init blog&amp;quot;&lt;/span&gt;    &lt;span class=&quot;comment&quot;&gt;# 提交并注释&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git remote add origin github.com/PengYanming1997/PengYanming1997.github.io.git    &lt;span class=&quot;comment&quot;&gt;# 添加到远程仓库&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git push origin &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;    &lt;span class=&quot;comment&quot;&gt;# 将代码提交到远程的source分支&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在GitHub仓库中可以看到已经有两个分支&lt;/p&gt;
&lt;h1 id=&quot;配置站点信息&quot;&gt;&lt;a href=&quot;#配置站点信息&quot; class=&quot;headerlink&quot; title=&quot;配置站点信息&quot;&gt;&lt;/a&gt;配置站点信息&lt;/h1&gt;&lt;p&gt;完成如上内容之后，实际上我们只完成了博客搭建的一小步，因为我们仅仅是把初始化的页面部署成功了，博客里面还没有设置任何有效的信息。下面就让我们来进行一下博客的基本配置，另外换一个好看的主题，配置一些其他的内容，让博客真正变成属于我们自己的博客吧。&lt;/p&gt;
&lt;h2 id=&quot;1-修改站点标题，关键字信息&quot;&gt;&lt;a href=&quot;#1-修改站点标题，关键字信息&quot; class=&quot;headerlink&quot; title=&quot;1 修改站点标题，关键字信息&quot;&gt;&lt;/a&gt;1 修改站点标题，关键字信息&lt;/h2&gt;&lt;p&gt;修改根目录下的 _config.yml 文件，找到 Site 区域，这里面可以配置站点标题 title、副标题 subtitle 等内容、关键字 keywords 等内容，比如我的就修改为如下内容：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Site&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;title: PengYanming1997&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;subtitle: 进阶中的小小程序媛&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;description: 记录一些生活中的小想法，以及工作进展 &amp;amp; tricks&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;keywords: &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;author: ReTinaPeng&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;language: zh-CN&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;timezone: Asia/Shanghai&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;hexo serve在本地运行并在浏览器中打开测试&lt;/p&gt;
&lt;h2 id=&quot;2-修改主题&quot;&gt;&lt;a href=&quot;#2-修改主题&quot; class=&quot;headerlink&quot; title=&quot;2 修改主题&quot;&gt;&lt;/a&gt;2 修改主题&lt;/h2&gt;&lt;p&gt;目前 Hexo 里面应用最多的主题基本就是 Next 主题了，个人感觉这个主题还是挺好看的，另外它支持的插件和功能也极为丰富，配置了这个主题，我们的博客可以支持更多的扩展功能，比如阅览进度条、中英文空格排版、图片懒加载等等。&lt;/p&gt;
&lt;p&gt;目前 Next 主题已经更新到 7.x 版本了，我们可以直接到 Next 主题的 GitHub Repository 上把这个主题下载下来。&lt;/p&gt;
&lt;p&gt;首先命令行进入到项目的根目录，执行如下命令即可：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; https://github.com/theme-next/hexo-theme-next themes/next&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;执行完毕之后 Next 主题的源码就会出现在项目的 themes/next 文件夹下。&lt;/p&gt;
&lt;p&gt;修改下博客所用的主题名称，修改项目根目录下的 _config.yml 文件，找到 theme 字段，修改为 next 即可，修改如下：&lt;/p&gt;
&lt;p&gt;theme: next&lt;br&gt;然后本地重新开启服务，访问刷新下页面，就可以看到 next 主题就切换成功了&lt;/p&gt;
&lt;h2 id=&quot;3-配置主题&quot;&gt;&lt;a href=&quot;#3-配置主题&quot; class=&quot;headerlink&quot; title=&quot;3 配置主题&quot;&gt;&lt;/a&gt;3 配置主题&lt;/h2&gt;&lt;p&gt;现在我们已经成功切换到 next 主题上面了，接下来我们就对主题进行进一步地详细配置吧，比如修改样式、增加其他各项功能的支持。&lt;/p&gt;
&lt;p&gt;Next 主题内部也提供了一个配置文件，名字同样叫做 _config.yml，只不过位置不一样，它在 themes/next 文件夹下，Next 主题里面所有的功能都可以通过这个配置文件来控制，下文所述的内容都是修改的 themes/next/_config.yml 文件。&lt;/p&gt;
&lt;p&gt;Next 主题还提供了多种样式，风格都是类似黑白的搭配，但整个布局位置不太一样，通过修改配置文件的 scheme 字段即可，我选了 Pisces 样式，修改 _config.yml （注意是 themes/next/_config.yml 文件）如下：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;scheme: Pisces&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;另外还有几个可选项，比如：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# scheme: Muse&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#scheme: Mist&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scheme: Pisces&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#scheme: Gemini&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;重新在本地运行，浏览器查看就已经变成Pisces样式了：&lt;/p&gt;
&lt;p&gt;favicon 就是站点标签栏的小图标，默认是用的 Hexo 的小图标，如果我们有站点 Logo 的图片的话，我们可以自己定制小图标。&lt;/p&gt;
&lt;p&gt;但这并不意味着我们需要自己用 PS 自己来设计，已经有一个网站可以直接将图片转化为站点小图标，站点链接为：&lt;a href=&quot;https://realfavicongenerator.net,到这里上传一张图,便可以直接打包下载各种尺寸和适配不同设备的小图标./&quot;&gt;https://realfavicongenerator.net，到这里上传一张图，便可以直接打包下载各种尺寸和适配不同设备的小图标。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;图标下载下来之后把它放在 themes/next/source/images 目录下面。&lt;/p&gt;
&lt;p&gt;然后在配置文件里面找到 favicon 配置项，把一些相关路径配置进去即可，示例如下：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;favicon:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  small: /images/favicon-16x16.png&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  medium: /images/favicon-32x32.png&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  apple_touch_icon: /images/apple-touch-icon.png&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  safari_pinned_tab: /images/safari-pinned-tab.svg&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;配置完成之后刷新页面，整个页面的标签图标就被更新了。&lt;/p&gt;
&lt;p&gt;avatar 这个就类似站点的头像，如果设置了这个，会在站点的作者信息旁边额外显示一个头像，将其放置到 themes/next/source/images/avatar.png 路径，然后在主题 _config.yml 文件下编辑 avatar 的配置，修改为正确的路径即可。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Sidebar Avatar&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;avatar:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# In theme directory (source/images): /images/avatar.gif&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# In site directory (source/uploads): /uploads/avatar.gif&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# You can also use other linking images.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  url: /images/avatar.png&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# If true, the avatar would be dispalyed in circle.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  rounded: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# If true, the avatar would be rotated with the cursor.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  rotated: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;配置完成之后刷新页面，头像的图片就会显示出来。&lt;/p&gt;
&lt;p&gt;博客一般是需要 RSS 订阅的，如果要开启 RSS 订阅，这里需要安装一个插件，叫做 hexo-generator-feed，安装完成之后，站点会自动生成 RSS Feed 文件，安装命令如下：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-generator-feed --save&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在项目根目录下运行这个命令，安装完成之后不需要其他的配置，以后每次编译生成站点的时候就会自动生成 RSS Feed 文件了。&lt;/p&gt;
&lt;p&gt;作为一个为程序员，虽然代码敲的不咋样，但是代码块的显示还是需要很讲究的，默认的代码块我个人不是特别喜欢，因此我把代码的颜色修改为黑色，并把复制按钮的样式修改为类似 Mac 的样式，修改 _config.yml 文件的 codeblock 区块如下：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;codeblock:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# Code Highlight theme&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# Available values: normal | night | night eighties | night blue | night bright | solarized | solarized dark | galactic&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# See: https://github.com/chriskempson/tomorrow-theme&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# highlight_theme: normal&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  highlight_theme: night bright&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# Add copy button on codeblock&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  copy_button:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;enable&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# Show text copy result.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    show_result: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# Available values: default | flat | mac&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    style: mac&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;``` &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;我们在浏览网页的时候，如果已经看完了想快速返回到网站的上端，一般都是有一个按钮来辅助的，这里也支持它的配置，修改 _config.yml 的 back2top 字段即可，我的设置如下：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;``` bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;back2top:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;enable&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# Back to top in sidebar.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  sidebar: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# Scroll percent label in b2t button.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  scrollpercent: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;enable 默认为 true，即默认显示。sidebar 如果设置为 true，按钮会出现在侧栏下方，个人觉得并不是很好看，就取消了，scrollpercent 就是显示阅读百分比，个人觉得还不错，就将其设置为 true。&lt;/p&gt;
&lt;p&gt;reading_process，阅读进度。大家可能注意到有些站点的最上侧会出现一个细细的进度条，代表页面加载进度和阅读进度，如果大家想设置的话也可以试试，我将其打开了，修改 _config.yml 如下：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Reading progress bar&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;reading_progress:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;enable&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# Available values: top | bottom&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  position: top&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  color: &lt;span class=&quot;string&quot;&gt;&amp;quot;#222&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  height: 2px&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;p&gt;书签，可以根据阅读历史记录，在下次打开页面的时候快速帮助我们定位到上次的位置，大家可以根据喜好开启和关闭，我的配置如下：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;bookmark:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;enable&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# Customize the color of the bookmark.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  color: &lt;span class=&quot;string&quot;&gt;&amp;quot;#222&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# If auto, save the reading progress when closing the page or clicking the bookmark-icon.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# If manual, only save it by clicking the bookmark-icon.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  save: auto&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;``` &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;在一些技术博客上，大家可能注意到在页面的右上角有个 GitHub 图标，点击之后可以跳转到其源码页面，可以为 GitHub Repository 引流，大家如果想显示的话可以自行选择打开，我的配置如下：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;``` bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# `Follow me on GitHub` banner in the top-right corner.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;github_banner:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;enable&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  permalink: https://github.com/PengYanming1997/PengYanming1997.github.io.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  title: Follow 59devops on GitHub&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;p&gt;由于 Hexo 的博客是静态博客，而且也没有连接数据库的功能，所以它的评论功能是不能自行集成的，但可以集成第三方的服务。&lt;/p&gt;
&lt;p&gt;Next 主题里面提供了多种评论插件的集成，有 changyan | disqus | disqusjs | facebook_comments_plugin | gitalk | livere | valine | vkontakte 这些。&lt;/p&gt;
&lt;p&gt;首先需要在 GitHub 上面注册一个 OAuth Application，链接为：&lt;a href=&quot;https://github.com/settings/applications/new%EF%BC%8C%E6%B3%A8%E5%86%8C%E5%AE%8C%E6%AF%95%E4%B9%8B%E5%90%8E%E6%8B%BF%E5%88%B0&quot;&gt;https://github.com/settings/applications/new，注册完毕之后拿到&lt;/a&gt; Client ID、Client Secret 就可以了。&lt;/p&gt;
&lt;p&gt;首先需要在 _config.yml 文件的 comments 区域配置使用 gitalk：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Multiple Comment System Support&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;comments:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# Available values: tabs | buttons&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  style: tabs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# Choose a comment system to be displayed by default.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# Available values: changyan | disqus | disqusjs | facebook_comments_plugin | gitalk | livere | valine | vkontakte&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  active: gitalk&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;主要是 comments.active 字段选择对应的名称即可。&lt;/p&gt;
&lt;p&gt;然后找打 gitalk 配置，添加它的各项配置：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Gitalk&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Demo: https://gitalk.github.io&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# For more information: https://github.com/gitalk/gitalk&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gitalk:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;enable&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  github_id: 59devops&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  repo: 59devops.github.io&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  client_id: cb34a61011c438548cec&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  client_secret: 3d9c756a081ce2b91a6a286eb1a0a02a71ced6ca&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  admin_user: 59devops&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  distraction_free_mode: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# Facebook-like distraction free mode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# Gitalk&amp;#x27;s display language depends on user&amp;#x27;s browser or system environment&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# If you want everyone visiting your site to see a uniform language, you can set a force language value&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# Available values: en | es-ES | fr | ru | zh-CN | zh-TW&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  language: zh-CN&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;GitHub 授权登录之后就可以使用了，评论的内容会自动出现在 Issue 里面。&lt;/p&gt;
&lt;p&gt;如果你习惯在中文和英文之间留空格的话，pangu 就是来解决这个问题的，我们只需要在主题里面开启这个选项，在编译生成页面的时候，中英文之间就会自动添加空格，看起来更加美观。&lt;/p&gt;
&lt;p&gt;具体的修改如下：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pangu: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;``` &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;可能在一些情况下我们需要写一个公式，比如演示一个算法推导过程，MarkDown 是支持公式显示的，Hexo 的 Next 主题同样是支持的。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Next 主题提供了两个渲染引擎，分别是 mathjax 和 katex，后者相对前者来说渲染速度更快，而且不需要 JavaScript 的额外支持，但后者支持的功能现在还不如前者丰富，具体的对比可以看官方文档：https://theme-next.org/docs/third-party-services/math-equations。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;这里选择了 mathjax，通过修改配置即可启用：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;``` bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;math:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;enable&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# Default (true) will load mathjax / katex script on demand.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# That is it only render those page which has `mathjax: true` in Front-matter.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# If you set it to false, it will load mathjax / katex srcipt EVERY PAGE.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  per_page: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# hexo-renderer-pandoc (or hexo-renderer-kramed) required for full MathJax support.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  mathjax:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;enable&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# See: https://mhchem.github.io/MathJax-mhchem/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mhchem: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;mathjax 的使用需要我们额外安装一个插件，叫做 hexo-renderer-kramed，另外也可以安装 hexo-renderer-pandoc，命令如下：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm un hexo-renderer-marked --save&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm i hexo-renderer-kramed --save&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;另外还有其他的插件支持，大家可以到官方文档查看。&lt;/p&gt;
&lt;p&gt;可能大家听说过 Ajax，没听说过 pjax，这个技术实际上就是利用 Ajax 技术实现了局部页面刷新，既可以实现 URL 的更换，有可以做到无刷新加载。&lt;/p&gt;
&lt;p&gt;要开启这个功能需要先将 pjax 功能开启，然后安装对应的 pjax 依赖库，首先修改 _config.yml 修改如下：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pjax: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;``` &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;然后安装依赖库，切换到 next 主题下，然后安装依赖库：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;``` bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; themes/next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; https://github.com/theme-next/theme-next-pjax &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;/lib/pjax&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样 pjax 就开启了，页面就可以实现无刷新加载了。&lt;/p&gt;
&lt;h1 id=&quot;主题的其他配置-：&quot;&gt;&lt;a href=&quot;#主题的其他配置-：&quot; class=&quot;headerlink&quot; title=&quot;主题的其他配置 ：&quot;&gt;&lt;/a&gt;主题的其他配置 ：&lt;/h1&gt;&lt;p&gt;参考官方文档：&lt;a href=&quot;https://theme-next.org/docs/%E3%80%82&quot;&gt;https://theme-next.org/docs/。&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;文章&quot;&gt;&lt;a href=&quot;#文章&quot; class=&quot;headerlink&quot; title=&quot;文章&quot;&gt;&lt;/a&gt;文章&lt;/h1&gt;&lt;h2 id=&quot;1-新建文章&quot;&gt;&lt;a href=&quot;#1-新建文章&quot; class=&quot;headerlink&quot; title=&quot;1 新建文章&quot;&gt;&lt;/a&gt;1 新建文章&lt;/h2&gt;&lt;p&gt;Hexo默认安装完就会有一篇文章，我们需要借助hexo命令添加新的文章：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo new hello-hexo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;创建的文章会出现在 source/_posts 文件夹下，是 MarkDown 格式。&lt;/p&gt;
&lt;h2 id=&quot;2-文章的标签和分类&quot;&gt;&lt;a href=&quot;#2-文章的标签和分类&quot; class=&quot;headerlink&quot; title=&quot;2 文章的标签和分类&quot;&gt;&lt;/a&gt;2 文章的标签和分类&lt;/h2&gt;&lt;p&gt;在文章开头通过如下格式添加必要信息：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;title: 标题 &lt;span class=&quot;comment&quot;&gt;# 自动创建，如 hello-world&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;date: 日期 &lt;span class=&quot;comment&quot;&gt;# 自动创建，如 2019-09-22 01:47:21&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tags: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- 标签1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- 标签2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- 标签3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;categories:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- 分类1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- 分类2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;---&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;开头下方撰写正文，MarkDown 格式书写即可。&lt;/p&gt;
&lt;p&gt;这样在下次编译的时候就会自动识别标题、时间、类别等等，另外还有其他的一些参数设置，可以参考文档：&lt;a href=&quot;https://hexo.io/zh-cn/docs/writing.html%E3%80%82&quot;&gt;https://hexo.io/zh-cn/docs/writing.html。&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;3-博客首页只显示文章标题和摘要&quot;&gt;&lt;a href=&quot;#3-博客首页只显示文章标题和摘要&quot; class=&quot;headerlink&quot; title=&quot;3 博客首页只显示文章标题和摘要&quot;&gt;&lt;/a&gt;3 博客首页只显示文章标题和摘要&lt;/h2&gt;&lt;p&gt;默认情况下hexo博客(如本站)的首页显示的是完整的文章 – 而文章比较长的时候这无疑会带来诸多不便。只要加入一个&lt;/p&gt;</summary>
    
    
    
    <category term="教程" scheme="http://example.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Hexo框架从零搭建个人博客" scheme="http://example.com/tags/Hexo%E6%A1%86%E6%9E%B6%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2020/10/16/hello-world/"/>
    <id>http://example.com/2020/10/16/hello-world/</id>
    <published>2020-10-16T03:14:13.751Z</published>
    <updated>2020-10-16T07:36:03.772Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    <category term="教程" scheme="http://example.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="hexo框架运行个人博客" scheme="http://example.com/tags/hexo%E6%A1%86%E6%9E%B6%E8%BF%90%E8%A1%8C%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
